"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1270],{72654:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var o=n(85893),s=n(11151);const r={id:"enumeration",title:"Enumeration",sidebar_label:"Enumeration"},i=void 0,a={id:"tutorials/nfts/js/enumeration",title:"Enumeration",description:"In the previous tutorials, you looked at ways to integrate the minting functionality into a skeleton smart contract. In order to get your NFTs to show in the wallet, you also had to deploy a patch fix that implemented one of the enumeration methods. In this tutorial, you'll expand on and finish the rest of the enumeration methods as per the standard",source:"@site/../docs/3.tutorials/nfts/js/3-enumeration.md",sourceDirName:"3.tutorials/nfts/js",slug:"/tutorials/nfts/js/enumeration",permalink:"/tutorials/nfts/js/enumeration",draft:!1,unlisted:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/3.tutorials/nfts/js/3-enumeration.md",tags:[],version:"current",lastUpdatedBy:"Dami\xe1n Parrino",lastUpdatedAt:1674302473,formattedLastUpdatedAt:"Jan 21, 2023",sidebarPosition:3,frontMatter:{id:"enumeration",title:"Enumeration",sidebar_label:"Enumeration"},sidebar:"contracts",previous:{title:"Upgrade a Contract",permalink:"/tutorials/nfts/js/upgrade-contract"},next:{title:"Core",permalink:"/tutorials/nfts/js/core"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Modifications to the contract",id:"modifications-to-the-contract",level:2},{value:"NFT Total Supply",id:"nft-total-supply",level:3},{value:"NFT Tokens",id:"nft-tokens",level:3},{value:"NFT Supply For Owner",id:"nft-supply-for-owner",level:3},{value:"Redeploying the contract",id:"redeploying-contract",level:2},{value:"Enumerating tokens",id:"enumerating-tokens",level:2},{value:"NFT tokens",id:"nft-tokens-1",level:3},{value:"Tokens by owner",id:"tokens-by-owner",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["In the previous tutorials, you looked at ways to integrate the minting functionality into a skeleton smart contract. In order to get your NFTs to show in the wallet, you also had to deploy a patch fix that implemented one of the enumeration methods. In this tutorial, you'll expand on and finish the rest of the enumeration methods as per the ",(0,o.jsx)(t.a,{href:"https://nomicon.io/Standards/Tokens/NonFungibleToken/Enumeration",children:"standard"}),"\nNow you'll extend the NFT smart contract and add a couple of enumeration methods that can be used to return the contract's state."]}),"\n",(0,o.jsx)(t.admonition,{type:"caution",children:(0,o.jsxs)(t.p,{children:["The JS-SDK is currently in ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.a,{href:"https://github.com/near/near-sdk-js/releases/",children:(0,o.jsx)(t.code,{children:"Alpha"})})}),"."]})}),"\n",(0,o.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(t.p,{children:["As mentioned in the ",(0,o.jsx)(t.a,{href:"/tutorials/nfts/js/upgrade-contract/",children:"Upgrade a Contract"})," tutorial, you can deploy patches and fixes to smart contracts. This time, you'll use that knowledge to implement the ",(0,o.jsx)(t.code,{children:"nft_total_supply"}),", ",(0,o.jsx)(t.code,{children:"nft_tokens"})," and ",(0,o.jsx)(t.code,{children:"nft_supply_for_owner"})," enumeration functions."]}),"\n",(0,o.jsxs)(t.p,{children:["To get started, either switch to the ",(0,o.jsx)(t.code,{children:"2.minting"})," branch from our ",(0,o.jsx)(t.a,{href:"https://github.com/near-examples/nft-tutorial/",children:"GitHub repository"}),", or continue your work from the previous tutorials.\nIf you haven't cloned it yet, refer to the ",(0,o.jsx)(t.a,{href:"/tutorials/nfts/js/skeleton#building-the-skeleton",children:"Contract Architecture"})," to check out the repository."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"git checkout 2.minting\n"})}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["If you wish to see the finished code for this ",(0,o.jsx)(t.em,{children:"Enumeration"})," tutorial, you can find it on the ",(0,o.jsx)(t.code,{children:"3.enumeration"})," branch."]})}),"\n",(0,o.jsx)(t.h2,{id:"modifications-to-the-contract",children:"Modifications to the contract"}),"\n",(0,o.jsxs)(t.p,{children:["Let's start by opening the  ",(0,o.jsx)(t.code,{children:"src/enumeration.ts"})," file and locating the empty ",(0,o.jsx)(t.code,{children:"internalNftTotalSupply"})," function."]}),"\n",(0,o.jsx)(t.h3,{id:"nft-total-supply",children:"NFT Total Supply"}),"\n",(0,o.jsxs)(t.p,{children:["This function should return the total number of NFTs stored on the contract. You can easily achieve this functionality by simply returning the length of the ",(0,o.jsx)(t.code,{children:"nftMetadataById"})," data structure."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:"reference",children:"https://github.com/near-examples/nft-tutorial-js/blob/3.enumeration/src/nft-contract/enumeration.ts#L8-L16\n"})}),"\n",(0,o.jsx)(t.h3,{id:"nft-tokens",children:"NFT Tokens"}),"\n",(0,o.jsxs)(t.p,{children:["This function should return a paginated list of ",(0,o.jsx)(t.code,{children:"JsonTokens"})," that are stored on the contract regardless of their owners.\nIf the user provides a ",(0,o.jsx)(t.code,{children:"from_index"})," parameter, you should use that as the starting point for which to start iterating through tokens; otherwise it should start from the beginning. Likewise, if the user provides a ",(0,o.jsx)(t.code,{children:"limit"})," parameter, the function shall stop after reaching either the limit or the end of the list."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:"reference",children:"https://github.com/near-examples/nft-tutorial-js/blob/3.enumeration/src/nft-contract/enumeration.ts#L18-L43\n"})}),"\n",(0,o.jsx)(t.h3,{id:"nft-supply-for-owner",children:"NFT Supply For Owner"}),"\n",(0,o.jsxs)(t.p,{children:["This function should look for all the non-fungible tokens for a user-defined owner, and return the length of the resulting set.\nIf there isn't a set of tokens for the provided Account ID, then the function shall return ",(0,o.jsx)(t.code,{children:"0"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",metastring:"reference",children:"https://github.com/near-examples/nft-tutorial-js/blob/3.enumeration/src/nft-contract/enumeration.ts#L45-L62\n"})}),"\n",(0,o.jsx)(t.p,{children:"Next, you can use the CLI to query these new methods and validate that they work correctly."}),"\n",(0,o.jsx)(t.h2,{id:"redeploying-contract",children:"Redeploying the contract"}),"\n",(0,o.jsxs)(t.p,{children:["Now that you've implemented the necessary logic for ",(0,o.jsx)(t.code,{children:"nft_tokens_for_owner"}),", it's time to build and re-deploy the contract to your account. Using the build script, deploy the contract as you did in the previous tutorials:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:"yarn build && near deploy --wasmFile build/nft.wasm --accountId $NFT_CONTRACT_ID\n"})}),"\n",(0,o.jsxs)(t.p,{children:["This should output a warning saying that the account has a deployed contract and will ask if you'd like to proceed. Simply type ",(0,o.jsx)(t.code,{children:"y"})," and hit enter."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:"This account already has a deployed contract [ AKJK7sCysrWrFZ976YVBnm6yzmJuKLzdAyssfzK9yLsa ]. Do you want to proceed? (y/n)\n"})}),"\n",(0,o.jsx)(t.h2,{id:"enumerating-tokens",children:"Enumerating tokens"}),"\n",(0,o.jsx)(t.p,{children:"Once the updated contract has been redeployed, you can test and see if these new functions work as expected."}),"\n",(0,o.jsx)(t.h3,{id:"nft-tokens-1",children:"NFT tokens"}),"\n",(0,o.jsx)(t.p,{children:"Let's query for a list of non-fungible tokens on the contract. Use the following command to query for the information of up to 50 NFTs starting from the 10th item:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'near view $NFT_CONTRACT_ID nft_tokens \'{"from_index": "10", "limit": 50}\'\n'})}),"\n",(0,o.jsx)(t.p,{children:"This command should return an output similar to the following:"}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"Example response: "}),(0,o.jsx)("p",{children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-json",children:"[]\n"})})})]}),"\n",(0,o.jsx)(t.h3,{id:"tokens-by-owner",children:"Tokens by owner"}),"\n",(0,o.jsxs)(t.p,{children:["To get the total supply of NFTs owned by the ",(0,o.jsx)(t.code,{children:"goteam.testnet"})," account, call the ",(0,o.jsx)(t.code,{children:"nft_supply_for_owner"})," function and set the ",(0,o.jsx)(t.code,{children:"account_id"})," parameter:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-bash",children:'near view $NFT_CONTRACT_ID nft_supply_for_owner \'{"account_id": "goteam.testnet"}\'\n'})}),"\n",(0,o.jsx)(t.p,{children:"This should return an output similar to the following:"}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsx)("summary",{children:"Example response: "}),(0,o.jsx)("p",{children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-json",children:"0\n"})})})]}),"\n",(0,o.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsxs)(t.p,{children:["In this tutorial, you have added two ",(0,o.jsx)(t.a,{href:"/tutorials/nfts/js/enumeration#modifications-to-the-contract",children:"new enumeration functions"}),", and now you have a basic NFT smart contract with minting and enumeration methods in place. After implementing these modifications, you redeployed the smart contract and tested the functions using the CLI."]}),"\n",(0,o.jsxs)(t.p,{children:["In the ",(0,o.jsx)(t.a,{href:"/tutorials/nfts/js/core",children:"next tutorial"}),", you'll implement the core functions needed to allow users to transfer the minted tokens."]}),"\n",(0,o.jsx)(t.admonition,{title:"Remember",type:"info",children:(0,o.jsxs)(t.p,{children:["If you want to see the finished code from this tutorial, you can checkout the ",(0,o.jsx)(t.code,{children:"3.enumeration"})," branch."]})}),"\n",(0,o.jsxs)(t.admonition,{title:"Versioning for this article",type:"note",children:[(0,o.jsx)(t.p,{children:"At the time of this writing, this example works with the following versions:"}),(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["near-cli: ",(0,o.jsx)(t.code,{children:"3.0.0"})]}),"\n",(0,o.jsxs)(t.li,{children:["NFT standard: ",(0,o.jsx)(t.a,{href:"https://nomicon.io/Standards/Tokens/NonFungibleToken/Core",children:"NEP171"}),", version ",(0,o.jsx)(t.code,{children:"1.0.0"})]}),"\n",(0,o.jsxs)(t.li,{children:["Enumeration standard: ",(0,o.jsx)(t.a,{href:"https://nomicon.io/Standards/Tokens/NonFungibleToken/Enumeration",children:"NEP181"}),", version ",(0,o.jsx)(t.code,{children:"1.0.0"})]}),"\n"]})]})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>i});var o=n(67294);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);