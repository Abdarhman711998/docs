"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[390],{80099:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>r});var a=n(85893),i=n(11151);const s={id:"rpc",title:"RPC Client"},c="Diagram",o={id:"data-availability/rpc",title:"RPC Client",description:"This client is the defacto client for submitting blobs to NEAR.",source:"@site/../docs/data-availability/rpc.md",sourceDirName:"data-availability",slug:"/data-availability/rpc",permalink:"/ko/data-availability/rpc",draft:!1,unlisted:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/data-availability/rpc.md",tags:[],version:"current",lastUpdatedBy:"gagdiez",lastUpdatedAt:1699467323,formattedLastUpdatedAt:"2023\ub144 11\uc6d4 8\uc77c",frontMatter:{id:"rpc",title:"RPC Client"},sidebar:"data-availability",previous:{title:"Light Client",permalink:"/ko/data-availability/light-client"},next:{title:"Integrations",permalink:"/ko/data-availability/integrations"}},l={},r=[{value:"Rust",id:"rust",level:2},{value:"Golang, or anything CFFI compatible",id:"golang-or-anything-cffi-compatible",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",hr:"hr",mermaid:"mermaid",p:"p",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:['This client is the defacto client for submitting blobs to NEAR.\nThese crates allow a client to interact with the blob store.\nIt can be treated as a "black box", where blobs go in, and ',(0,a.jsx)(t.code,{children:"[transaction_id ++ commitment]"})," emerges."]}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"da-rpc"})," crate is the rust client, which anyone can use if they prefer rust in their application.\nThe responsibility of this client is to provide a simple interface for interacting with NEAR DA."]}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"da-rpc-sys"})," crate is the FFI client binding for use by non-rust applications. This calls through to ",(0,a.jsx)(t.code,{children:"da-rpc"})," to interact with the blob store, with some additional black box functionality for dealing with pointers wrangling and such."]}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"da-rpc-go"})," crate is the go client bindings for use by non-rust applications, and this calls through to ",(0,a.jsx)(t.code,{children:"da-rpc-sys"}),", which provides another application-level layer for easy interaction with the bindings."]}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsx)(t.h1,{id:"diagram",children:"Diagram"}),"\n",(0,a.jsx)(t.p,{children:"The below diagrams outline how a rollup will interact with DA depending on their architecture."}),"\n",(0,a.jsx)(t.h2,{id:"rust",children:"Rust"}),"\n",(0,a.jsx)(t.mermaid,{value:"classDiagram \nclass DaRpcClient\nclass Blob {\n    +Namespace namespace\n    +bytes32 commitment\n    +bytes data\n}\nclass Namespace {\n    +u8 version\n    +u32 id\n}\nclass FrameRef {\n    +bytes32 tx_id\n    +bytes32 commitment\n}\n\nclass DaRpc {\n    <<interface>>\n    +submit(List~Blob~) FrameRef\n    +get(tx_id)\n}\n\nDaRpc <|-- DaRpcClient : implements\nDaRpc >-- Rollup : submit blobs\nDaRpc >-- Rollup : get blobs\n\nclass L1 {\n    postCommitment()\n    verifySequence()\n}\nL1 >-- Rollup : post frameRef with commitments"}),"\n",(0,a.jsx)(t.h2,{id:"golang-or-anything-cffi-compatible",children:"Golang, or anything CFFI compatible"}),"\n",(0,a.jsx)(t.p,{children:"This diagram outlines how rollups written in golang would interact with the go rpc client."}),"\n",(0,a.jsx)(t.mermaid,{value:"classDiagram \nclass Blob{\n    +Namespace namespace\n    +bytes32 commitment\n    +bytes data\n}\n\nclass Namespace {\n    +u8 version\n    +u32 id\n}\n\nclass FrameRef {\n    +bytes32 tx_id\n    +bytes32 commitment\n}\n\nclass DaRpcClient\n\nclass DaRpc{\n    <<interface>>\n    +submit(List~Blob~) FrameRef\n    +get(tx_id)\n}\n\nclass DaRpcSys{\n    +new_client(account, sk, contract, network, namespace)\n    +submit(*client, blobs) frame\n    +get(*client, tx_id)\n}\n\nclass DaRpcGo {\n    +newConfig(account, contract, key, namespaceId) Config\n    +submit(*Config, candidate, data) FrameRef\n    +force_submit(*Config, data) FrameRef\n    +get(*Config, FrameRef frameRef, txIndex)\n}\n\nDaRpc <|-- DaRpcClient : implements\nDaRpc >-- DaRpcSys : uses\nDaRpcSys >-- DaRpcGo : uses\n\nDaRpcGo >-- GoRollup : submit blobs\nDaRpcGo >-- GoRollup : get blobs\n\nclass L1 {\n    postCommitment()\n    verifySequence()\n}\nL1 >-- GoRollup : post frameRef with commitments"})]})}function p(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>c});var a=n(67294);const i={},s=a.createContext(i);function c(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);