"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2495],{45924:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>u});var s=n(85893),r=n(11151),i=n(71183),a=n(74866),l=n(85162);const o={id:"collections",title:"Collections"},c=void 0,d={id:"build/smart-contracts/anatomy/collections",title:"Collections",description:"When deciding on data structures to use for the data of the application, it is important to understand the tradeoffs of data structures in your smart contract.",source:"@site/i18n/vi/docusaurus-plugin-content-docs/current/2.build/2.smart-contracts/anatomy/collections.md",sourceDirName:"2.build/2.smart-contracts/anatomy",slug:"/build/smart-contracts/anatomy/collections",permalink:"/vi/build/smart-contracts/anatomy/collections",draft:!1,unlisted:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/2.build/2.smart-contracts/anatomy/collections.md",tags:[],version:"current",lastUpdatedBy:"Github Actions",lastUpdatedAt:1719825734e3,frontMatter:{id:"collections",title:"Collections"},sidebar:"build",previous:{title:"SDK Types",permalink:"/vi/build/smart-contracts/anatomy/types"},next:{title:"Environment",permalink:"/vi/build/smart-contracts/anatomy/environment"}},h={},u=[{value:"Native Collections",id:"native-collections",level:2},{value:"SDK Collections",id:"sdk-collections",level:2},{value:"Exposed Collections",id:"exposed-collections",level:3},{value:"Features",id:"features",level:3},{value:"Complexity",id:"complexity",level:3},{value:"Collections Cookbook",id:"collections-cookbook",level:2},{value:"Instantiation",id:"instantiation",level:3},{value:"Vector",id:"vector",level:3},{value:"Map",id:"map",level:3},{value:"Set",id:"set",level:3},{value:"Tree",id:"tree",level:3},{value:"<code>LazyOption</code>",id:"lazyoption",level:3},{value:"Nesting Collections",id:"nesting-collections",level:2},{value:"Error prone patterns",id:"error-prone-patterns",level:2},{value:"Nesting Errors",id:"nesting-errors",level:3},{value:"Pagination",id:"pagination",level:2},{value:"Storage Cost",id:"storage-cost",level:2},{value:"Storage Constraints on NEAR",id:"storage-constraints-on-near",level:2}];function x(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"When deciding on data structures to use for the data of the application, it is important to understand the tradeoffs of data structures in your smart contract."}),"\n",(0,s.jsx)(t.p,{children:"Choosing the wrong structure can create a bottleneck as the application scales, and migrating the state to the new data structures will come at a cost."}),"\n",(0,s.jsx)(t.p,{children:"You can choose between two types of collections:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["Native collections (e.g. ",(0,s.jsx)(t.code,{children:"Array"}),", ",(0,s.jsx)(t.code,{children:"Map"}),", ",(0,s.jsx)(t.code,{children:"Set"}),"), provided by the the language"]}),"\n",(0,s.jsxs)(t.li,{children:["SDK collections (e.g. ",(0,s.jsx)(t.code,{children:"UnorderedMap"}),", ",(0,s.jsx)(t.code,{children:"Vector"}),"), provided by the NEAR SDK"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Since the SDK reads all the contract's attributes when a function is executed - and writes them back when it finishes - understanding how the SDK stores and loads both types of collections is crucial to decide which one to use."}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsx)(t.p,{children:"Use native collections for small amounts of data that need to be accessed all together, and SDK collections for large amounts of data that do not need to be accessed all together"})}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["Contracts store all their data in a ",(0,s.jsx)(t.code,{children:"key-value"})," database. The SDK handles this database, and stores values ",(0,s.jsx)(t.a,{href:"/vi/build/smart-contracts/anatomy/serialization",children:"serialized in JSON or Borsh"})]})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"native-collections",children:"Native Collections"}),"\n",(0,s.jsx)(t.p,{children:"Native collections are those provided by the language:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["JS: ",(0,s.jsx)(t.code,{children:"Array"}),", ",(0,s.jsx)(t.code,{children:"Set"}),", ",(0,s.jsx)(t.code,{children:"Map"})]}),"\n",(0,s.jsxs)(t.li,{children:["Rust: ",(0,s.jsx)(t.code,{children:"Vector"}),", ",(0,s.jsx)(t.code,{children:"HashMap"}),", ",(0,s.jsx)(t.code,{children:"Set"})]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"All entries in a native collection are serialized into a single value and stored together into the state. This means that every time a function execute, the SDK will read and deserialize all entries in the native collection."}),"\n",(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:" Serialization & Storage Example "}),(0,s.jsxs)(t.p,{children:["The array ",(0,s.jsx)(t.code,{children:"[1,2,3,4]"})," will be serialized into the JSON string ",(0,s.jsx)(t.code,{children:'"[1,2,3,4]"'})," in Javascript, and the Borsh byte-stream ",(0,s.jsx)(t.code,{children:"[0,0,0,4,1,2,3,4]"})," in Rust before being stored"]})]}),"\n",(0,s.jsx)(t.admonition,{title:"When to use them",type:"tip",children:(0,s.jsx)(t.p,{children:"Native collections are useful if you are planning to store smalls amounts of data that need to be accessed all together"})}),"\n",(0,s.jsx)(t.admonition,{title:"Keep Native Collections Small",type:"warning",children:(0,s.jsx)(t.p,{children:"As the collection grows, reading and writing it will cost more and more gas. If the collections grows too large, your contract might end up expending all its available gas in reading/writing the state, thus becoming unusable"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"sdk-collections",children:"SDK Collections"}),"\n",(0,s.jsx)(t.p,{children:"The NEAR SDKs expose collections that are optimized to store large amounts of data in the contract's state. These collections are built to have an interface similar to native collections."}),"\n",(0,s.jsx)(t.p,{children:'SDK collections are instantiated using a "prefix", which is used as an index to split the data into chunks. This way, SDK collections can defer reading and writing to the store until needed.'}),"\n",(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:" Serialization & Storage Example "}),(0,s.jsxs)(t.p,{children:["The sdk array ",(0,s.jsx)(t.code,{children:"[1,2,3,4]"})," with prefix ",(0,s.jsx)(t.code,{children:'"p"'})," will be stored as the string ",(0,s.jsx)(t.code,{children:'"p"'})," in the contract's attribute, and create four entries in the contract's storage: ",(0,s.jsx)(t.code,{children:"p-0:1"}),", ",(0,s.jsx)(t.code,{children:"p-1:2"}),"..."]})]}),"\n",(0,s.jsx)(t.admonition,{title:"when to use them",type:"tip",children:(0,s.jsx)(t.p,{children:"SDK collections are useful when you are planning to store large amounts of data that do not need to be accessed all together"})}),"\n",(0,s.jsx)("hr",{class:"subsection"}),"\n",(0,s.jsx)(t.h3,{id:"exposed-collections",children:"Exposed Collections"}),"\n",(0,s.jsxs)(a.Z,{groupId:"code-tabs",children:[(0,s.jsx)(l.Z,{value:"js",label:"\ud83c\udf10 JavaScript",children:(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"SDK Collection"}),(0,s.jsx)(t.th,{children:"Native Equivalent"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Vector"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Array"})}),(0,s.jsx)(t.td,{children:"A growable array type. The values are sharded in memory and can be used for iterable and indexable values that are dynamically sized."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"LookupMap"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Map"})}),(0,s.jsx)(t.td,{children:"This structure behaves as a thin wrapper around the key-value storage available to contracts. This structure does not contain any metadata about the elements in the map, so it is not iterable."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"UnorderedMap"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Map"})}),(0,s.jsxs)(t.td,{children:["Similar to ",(0,s.jsx)(t.code,{children:"LookupMap"}),", except that it stores additional data to be able to iterate through elements in the data structure."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"LookupSet"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Set"})}),(0,s.jsxs)(t.td,{children:["A set, which is similar to ",(0,s.jsx)(t.code,{children:"LookupMap"})," but without storing values, can be used for checking the unique existence of values. This structure is not iterable and can only be used for lookups."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"UnorderedSet"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Set"})}),(0,s.jsxs)(t.td,{children:["An iterable equivalent of ",(0,s.jsx)(t.code,{children:"LookupSet"})," which stores additional metadata for the elements contained in the set."]})]})]})]})}),(0,s.jsxs)(l.Z,{value:"rust",label:"\ud83e\udd80 Rust",children:[(0,s.jsx)(t.admonition,{title:"Note",type:"info",children:(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"near_sdk::collections"})," will be moving to ",(0,s.jsx)(t.code,{children:"near_sdk::store"})," and have updated APIs. If you would like to access these updated structures as they are being implemented, enable the ",(0,s.jsx)(t.code,{children:"unstable"})," feature on ",(0,s.jsx)(t.code,{children:"near-sdk"}),"."]})}),(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"SDK collection"}),(0,s.jsxs)(t.th,{children:[(0,s.jsx)(t.code,{children:"std"}),"&nbsp;equivalent"]}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"LazyOption<T>"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Option<T>"})}),(0,s.jsxs)(t.td,{children:["Optional value in storage. This value will only be read from storage when interacted with. This value will be ",(0,s.jsx)(t.code,{children:"Some<T>"})," when the value is saved in storage, and ",(0,s.jsx)(t.code,{children:"None"})," if the value at the prefix does not exist."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Vector<T>"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Vec<T>"})}),(0,s.jsx)(t.td,{children:"A growable array type. The values are sharded in memory and can be used for iterable and indexable values that are dynamically sized."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsxs)("code",{children:["LookupMap",(0,s.jsx)(t.code,{children:"<K,&amp;nbsp;V>"})]})}),(0,s.jsx)(t.td,{children:(0,s.jsxs)("code",{children:["HashMap",(0,s.jsx)(t.code,{children:"<K,&amp;nbsp;V>"})]})}),(0,s.jsx)(t.td,{children:"This structure behaves as a thin wrapper around the key-value storage available to contracts. This structure does not contain any metadata about the elements in the map, so it is not iterable."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsxs)("code",{children:["UnorderedMap",(0,s.jsx)(t.code,{children:"<K,&amp;nbsp;V>"})]})}),(0,s.jsx)(t.td,{children:(0,s.jsxs)("code",{children:["HashMap",(0,s.jsx)(t.code,{children:"<K,&amp;nbsp;V>"})]})}),(0,s.jsxs)(t.td,{children:["Similar to ",(0,s.jsx)(t.code,{children:"LookupMap"}),", except that it stores additional data to be able to iterate through elements in the data structure."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsxs)("code",{children:["TreeMap",(0,s.jsx)(t.code,{children:"<K,&amp;nbsp;V>"})]})}),(0,s.jsx)(t.td,{children:(0,s.jsxs)("code",{children:["BTreeMap",(0,s.jsx)(t.code,{children:"<K,&amp;nbsp;V>"})]})}),(0,s.jsxs)(t.td,{children:["An ordered equivalent of ",(0,s.jsx)(t.code,{children:"UnorderedMap"}),". The underlying implementation is based on an ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/AVL_tree",children:"AVL tree"}),". This structure should be used when a consistent order is needed or accessing the min/max keys is needed."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"LookupSet<T>"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"HashSet<T>"})}),(0,s.jsxs)(t.td,{children:["A set, which is similar to ",(0,s.jsx)(t.code,{children:"LookupMap"})," but without storing values, can be used for checking the unique existence of values. This structure is not iterable and can only be used for lookups."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"UnorderedSet<T>"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"HashSet<T>"})}),(0,s.jsxs)(t.td,{children:["An iterable equivalent of ",(0,s.jsx)(t.code,{children:"LookupSet"})," which stores additional metadata for the elements contained in the set."]})]})]})]})]})]}),"\n",(0,s.jsx)("hr",{class:"subsection"}),"\n",(0,s.jsx)(t.h3,{id:"features",children:"Features"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Iterable"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Clear All Values"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Preserves Insertion Order"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Range Selection"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Vector"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"\u2705"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"\u2705"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"\u2705"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"\u2705"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"LookupSet"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"UnorderedSet"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"\u2705"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"\u2705"}),(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"\u2705"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"LookupMap"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"}})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"UnorderedMap"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"\u2705"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"\u2705"}),(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"\u2705"})]})]})]}),"\n",(0,s.jsx)("hr",{class:"subsection"}),"\n",(0,s.jsx)(t.h3,{id:"complexity",children:"Complexity"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Access"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Insert"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Delete"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Search"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Traverse"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Clear"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"Vector"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)*"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)**"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(n)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(n)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(n)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"LookupSet"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"N/A"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"N/A"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"UnorderedSet"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(n)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(n)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"LookupMap"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"N/A"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"N/A"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"UnorderedMap"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(n)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(n)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"TreeMap"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(1)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(log n)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(log n)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(log n)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(n)"}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"O(n)"})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsxs)(t.em,{children:["* - to insert at the end of the vector using ",(0,s.jsx)(t.code,{children:"push_back"})," (or ",(0,s.jsx)(t.code,{children:"push_front"})," for deque)"]}),"\n",(0,s.jsxs)(t.em,{children:["** - to delete from the end of the vector using ",(0,s.jsx)(t.code,{children:"pop"})," (or ",(0,s.jsx)(t.code,{children:"pop_front"})," for deque), or delete using ",(0,s.jsx)(t.code,{children:"swap_remove"})," which swaps the element with the last element of the vector and then removes it."]})]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"collections-cookbook",children:"Collections Cookbook"}),"\n",(0,s.jsx)(t.h3,{id:"instantiation",children:"Instantiation"}),"\n",(0,s.jsxs)(t.p,{children:["All structures need to be initialized using a ",(0,s.jsxs)(t.strong,{children:["unique ",(0,s.jsx)(t.code,{children:"prefix"})]}),", which will be used to index the collection's values in the account's state"]}),"\n",(0,s.jsxs)(a.Z,{groupId:"code-tabs",children:[(0,s.jsx)(l.Z,{value:"js",label:"\ud83c\udf10 JavaScript",children:(0,s.jsx)(i.Ey,{fname:"index.js",language:"js",url:"https://github.com/near-examples/docs-examples/blob/main/storage-js/src/index.ts",start:"8",end:"11"})}),(0,s.jsxs)(l.Z,{value:"rust",label:"\ud83e\udd80 Rust",children:[(0,s.jsx)(i.Ey,{fname:"lib.rs",language:"rust",url:"https://github.com/near-examples/docs-examples/blob/main/storage-rs/contract/src/lib.rs",start:"33",end:"38"}),(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["Notice how we use ",(0,s.jsx)(t.code,{children:"enums"})," to ensure all collections have a different prefix. Moreover, ",(0,s.jsx)(t.code,{children:"enums"})," are very efficient since they get serialized into a single ",(0,s.jsx)(t.code,{children:"byte"})," prefix."]})})]})]}),"\n",(0,s.jsx)(t.admonition,{type:"warning",children:(0,s.jsx)(t.p,{children:"Because the values are not kept in memory and are lazily loaded from storage, it's important to make sure if a collection is replaced or removed, that the storage is cleared. In addition, it is important that if the collection is modified, the collection itself is updated in state because most collections will store some metadata."})}),"\n",(0,s.jsx)(t.admonition,{type:"danger",children:(0,s.jsx)(t.p,{children:"Be careful of not using the same prefix in two collections, otherwise, their storage space will collide, and you might overwrite information from one collection when writing in the other"})}),"\n",(0,s.jsx)("hr",{className:"subsection"}),"\n",(0,s.jsx)(t.h3,{id:"vector",children:"Vector"}),"\n",(0,s.jsxs)(t.p,{children:["Implements a ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Array_data_structure",children:"vector/array"})," which persists in the contract's storage. Please refer to the Rust and JS SDK's for a full reference on their interfaces."]}),"\n",(0,s.jsxs)(i.O2,{children:[(0,s.jsx)(i.SQ,{value:"js",language:"js",children:(0,s.jsx)(i.Ey,{fname:"index.js",url:"https://github.com/near-examples/docs-examples/blob/main/storage-js/src/index.ts",start:"25",end:"28"})}),(0,s.jsxs)(i.SQ,{value:"rust",language:"rust",children:[(0,s.jsx)(i.Ey,{fname:"vector.rs",url:"https://github.com/near-examples/docs-examples/blob/main/storage-rs/contract/src/vector.rs",start:"12",end:"30"}),(0,s.jsx)(i.Ey,{fname:"lib.rs",url:"https://github.com/near-examples/docs-examples/blob/main/storage-rs/contract/src/lib.rs",start:"7",end:"24"})]})]}),"\n",(0,s.jsx)("hr",{className:"subsection"}),"\n",(0,s.jsx)(t.h3,{id:"map",children:"Map"}),"\n",(0,s.jsxs)(t.p,{children:["Implements a ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Associative_array",children:"map/dictionary"})," which persists in the contract's storage. Please refer to the Rust and JS SDK's for a full reference on their interfaces."]}),"\n",(0,s.jsxs)(i.O2,{children:[(0,s.jsx)(i.SQ,{value:"js",language:"js",children:(0,s.jsx)(i.Ey,{fname:"index.js",url:"https://github.com/near-examples/docs-examples/blob/main/storage-js/src/index.ts",start:"33",end:"37"})}),(0,s.jsxs)(i.SQ,{value:"rust",language:"rust",children:[(0,s.jsx)(i.Ey,{fname:"map.rs",url:"https://github.com/near-examples/docs-examples/blob/main/storage-rs/contract/src/map.rs",start:"9",end:"24"}),(0,s.jsx)(i.Ey,{fname:"lib.rs",url:"https://github.com/near-examples/docs-examples/blob/main/storage-rs/contract/src/lib.rs",start:"7",end:"24"})]})]}),"\n",(0,s.jsx)("hr",{className:"subsection"}),"\n",(0,s.jsx)(t.h3,{id:"set",children:"Set"}),"\n",(0,s.jsxs)(t.p,{children:["Implements a ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Set_(abstract_data_type)",children:"set"})," which persists in the contract's storage. Please refer to the Rust and JS SDK's for a full reference on their interfaces."]}),"\n",(0,s.jsxs)(i.O2,{children:[(0,s.jsx)(i.SQ,{value:"js",language:"js",children:(0,s.jsx)(i.Ey,{fname:"index.js",url:"https://github.com/near-examples/docs-examples/blob/main/storage-js/src/index.ts",start:"42",end:"46"})}),(0,s.jsxs)(i.SQ,{value:"rust",language:"rust",children:[(0,s.jsx)(i.Ey,{fname:"set.rs",url:"https://github.com/near-examples/docs-examples/blob/main/storage-rs/contract/src/set.rs",start:"9",end:"16"}),(0,s.jsx)(i.Ey,{fname:"lib.rs",url:"https://github.com/near-examples/docs-examples/blob/main/storage-rs/contract/src/lib.rs",start:"7",end:"24"})]})]}),"\n",(0,s.jsx)("hr",{className:"subsection"}),"\n",(0,s.jsx)(t.h3,{id:"tree",children:"Tree"}),"\n",(0,s.jsxs)(t.p,{children:["An ordered equivalent of Map. The underlying implementation is based on an ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/AVL_tree",children:"AVL"}),". You should use this structure when you need to: have a consistent order, or access the min/max keys."]}),"\n",(0,s.jsx)(i.O2,{children:(0,s.jsxs)(i.SQ,{value:"rust",language:"rust",children:[(0,s.jsx)(i.Ey,{fname:"tree.rs",url:"https://github.com/near-examples/docs-examples/blob/main/storage-rs/contract/src/tree.rs",start:"9",end:"24"}),(0,s.jsx)(i.Ey,{fname:"lib.rs",url:"https://github.com/near-examples/docs-examples/blob/main/storage-rs/contract/src/lib.rs",start:"7",end:"24"})]})}),"\n",(0,s.jsx)("hr",{class:"subsection"}),"\n",(0,s.jsx)(t.h3,{id:"lazyoption",children:(0,s.jsx)(t.code,{children:"LazyOption"})}),"\n",(0,s.jsx)(t.p,{children:"It's a type of persistent collection that only stores a single value.\nThe goal is to prevent a contract from deserializing the given value until it's needed.\nAn example can be a large blob of metadata that is only needed when it's requested in a view call,\nbut not needed for the majority of contract operations."}),"\n",(0,s.jsxs)(t.p,{children:["It acts like an ",(0,s.jsx)(t.code,{children:"Option"})," that can either hold a value or not and also requires a unique prefix (a key in this case)\nlike other persistent collections."]}),"\n",(0,s.jsxs)(t.p,{children:["Compared to other collections, ",(0,s.jsx)(t.code,{children:"LazyOption"})," only allows you to initialize the value during initialization."]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"nesting-collections",children:"Nesting Collections"}),"\n",(0,s.jsxs)(t.p,{children:["It is possible to nest collections. When nesting SDK collections, remember to ",(0,s.jsx)(t.strong,{children:"assign different prefixes to all collections"})," (including the nested ones)."]}),"\n",(0,s.jsxs)(a.Z,{groupId:"code-tabs",children:[(0,s.jsx)(l.Z,{value:"js",label:"\ud83c\udf10 JavaScript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'While you can create nested maps, you first need to construct or deconstruct the structure from state. This is a temporary solution that will soon be automatically handled by the SDK.\n\n```ts \nimport { NearBindgen, call, view, near, UnorderedMap } from "near-sdk-js";\n\n@NearBindgen({})\nclass StatusMessage {\n  records: UnorderedMap;\n  constructor() {\n    this.records = new UnorderedMap("a");\n  }\n\n  @call({})\n  set_status({ message, prefix }: { message: string; prefix: string }) {\n    let account_id = near.signerAccountId();\n\n    const inner: any = this.records.get("b" + prefix);\n    const inner_map: UnorderedMap = inner\n      ? UnorderedMap.deserialize(inner)\n      : new UnorderedMap("b" + prefix);\n\n    inner_map.set(account_id, message);\n\n    this.records.set("b" + prefix, inner_map);\n  }\n\n  @view({})\n  get_status({ account_id, prefix }: { account_id: string; prefix: string }) {\n    const inner: any = this.records.get("b" + prefix);\n    const inner_map: UnorderedMap = inner\n      ? UnorderedMap.deserialize(inner)\n      : new UnorderedMap("b" + prefix);\n    return inner_map.get(account_id);\n  }\n}\n```\n'})})}),(0,s.jsx)(l.Z,{value:"rust",label:"\ud83e\udd80 Rust",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"In Rust the simplest way to avoid collisions between nested collections is by using `enums`\n\n```rust\nuse near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};\nuse near_sdk::collections::{UnorderedMap, UnorderedSet};\nuse near_sdk::{env, near, AccountId, BorshStorageKey, CryptoHash};\n\n#[near(contract_state)]\npub struct Contract {\n    pub accounts: UnorderedMap<AccountId, UnorderedSet<String>>,\n}\n\nimpl Default for Contract {\n    fn default() -> Self {\n        Self {\n            accounts: UnorderedMap::new(StorageKeys::Accounts),\n        }\n    }\n}\n\n#[near(serializers = [borsh])]\npub enum StorageKeys {\n    Accounts,\n    SubAccount { account_hash: CryptoHash },\n}\n\n#[near]\nimpl Contract {\n    pub fn get_tokens(&self, account_id: &AccountId) -> Vec<String> {\n        let tokens = self.accounts.get(account_id).unwrap_or_else(|| {\n            UnorderedSet::new(StorageKeys::SubAccount {\n                account_hash: env::sha256_array(account_id.as_bytes()),\n            })\n        });\n        tokens.to_vec()\n    }\n}\n```\n"})})})]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"error-prone-patterns",children:"Error prone patterns"}),"\n",(0,s.jsx)(t.p,{children:"Because the values are not kept in memory and are lazily loaded from storage, it's important to make sure if a collection is replaced or removed, that the storage is cleared. In addition, it is important that if the collection is modified, the collection itself is updated in state because most collections will store some metadata."}),"\n",(0,s.jsx)(t.p,{children:"Some error-prone patterns to avoid that cannot be restricted at the type level are:"}),"\n",(0,s.jsxs)(a.Z,{children:[(0,s.jsx)(l.Z,{value:"js",label:"\ud83c\udf10 JavaScript"}),(0,s.jsx)(l.Z,{value:"rust",label:"\ud83e\udd80 Rust"})]}),"\n",(0,s.jsx)(a.Z,{children:(0,s.jsxs)(l.Z,{value:"rust",label:"\ud83e\udd80 Rust",children:[(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:'use near_sdk::store::UnorderedMap;\n\nlet mut m = UnorderedMap::<u8, String>::new(b"m");\nm.insert(1, "test".to_string());\nassert_eq!(m.len(), 1);\nassert_eq!(m.get(&1), Some(&"test".to_string()));\n\n// Bug 1: Should not replace any collections without clearing state, this will reset any\n// metadata, such as the number of elements, leading to bugs. If you replace the collection\n// with something with a different prefix, it will be functional, but you will lose any\n// previous data and the old values will not be removed from storage.\nm = UnorderedMap::new(b"m");\nassert!(m.is_empty());\nassert_eq!(m.get(&1), Some(&"test".to_string()));\n\n// Bug 2: Should not use the same prefix as another collection\n// or there will be unexpected side effects.\nlet m2 = UnorderedMap::<u8, String>::new(b"m");\nassert!(m2.is_empty());\nassert_eq!(m2.get(&1), Some(&"test".to_string()));\n\n// Bug 3: forgetting to save the collection in storage. When the collection is attached to\n// the contract state (`self` in `#[near]`) this will be done automatically, but if\n// interacting with storage manually or working with nested collections, this is relevant.\nuse near_sdk::store::Vector;\n\n// Simulate roughly what happens during a function call that initializes state.\n{\n    let v = Vector::<u8>::new(b"v");\n    near_sdk::env::state_write(&v);\n}\n\n// Simulate what happens during a function call that just modifies the collection\n// but does not store the collection itself.\n{\n    let mut v: Vector<u8> = near_sdk::env::state_read().unwrap();\n    v.push(1);\n    // The bug is here that the collection itself if not written back\n}\n\nlet v: Vector<u8> = near_sdk::env::state_read().unwrap();\n// This will report as if the collection is empty, even though the element exists\nassert!(v.get(0).is_none());\nassert!(\n    near_sdk::env::storage_read(&[b"v".as_slice(), &0u32.to_le_bytes()].concat()).is_some()\n);\n\n// Bug 4 (only relevant for `near_sdk::store`): These collections will cache writes as well\n// as reads, and the writes are performed on [`Drop`](https://doc.rust-lang.org/std/ops/trait.Drop.html)\n// so if the collection is kept in static memory or something like `std::mem::forget` is used,\n// the changes will not be persisted.\nuse near_sdk::store::LookupSet;\n\nlet mut m: LookupSet<u8> = LookupSet::new(b"l");\nm.insert(1);\nassert!(m.contains(&1));\n\n// This would be the fix, manually flushing the intermediate changes to storage.\n// m.flush();\nstd::mem::forget(m);\n\nm = LookupSet::new(b"l");\nassert!(!m.contains(&1));\n'})}),(0,s.jsx)("hr",{class:"subsection"}),(0,s.jsx)(t.h3,{id:"nesting-errors",children:"Nesting Errors"}),(0,s.jsxs)(t.p,{children:["By extension of the error-prone patterns to avoid mentioned in the ",(0,s.jsx)(t.a,{href:"/vi/build/smart-contracts/anatomy/collections#error-prone-patterns",children:"collections section"}),", it is important to keep in mind how these bugs can easily be introduced into a contract when using nested collections."]}),(0,s.jsx)(t.p,{children:"Some issues for more context:"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/near/near-sdk-rs/issues/560",children:"https://github.com/near/near-sdk-rs/issues/560"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/near/near-sdk-rs/issues/703",children:"https://github.com/near/near-sdk-rs/issues/703"})}),"\n"]}),(0,s.jsx)(t.p,{children:"The following cases are the most commonly encountered bugs that cannot be restricted at the type level:"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:'use near_sdk::borsh::{self, BorshSerialize};\nuse near_sdk::collections::{LookupMap, UnorderedSet};\nuse near_sdk::BorshStorageKey;\n\n#[derive(BorshStorageKey, BorshSerialize)]\npub enum StorageKey {\n    Root,\n    Nested(u8),\n}\n\n// Bug 1: Nested collection is removed without clearing it\'s own state.\nlet mut root: LookupMap<u8, UnorderedSet<String>> = LookupMap::new(StorageKey::Root);\nlet mut nested = UnorderedSet::new(StorageKey::Nested(1));\nnested.insert(&"test".to_string());\nroot.insert(&1, &nested);\n\n// Remove inserted collection without clearing it\'s sub-state.\nlet mut _removed = root.remove(&1).unwrap();\n\n// This line would fix the bug:\n// _removed.clear();\n\n// This collection will now be in an inconsistent state if an empty UnorderedSet is put\n// in the same entry of `root`.\nroot.insert(&1, &UnorderedSet::new(StorageKey::Nested(1)));\nlet n = root.get(&1).unwrap();\nassert!(n.is_empty());\nassert!(n.contains(&"test".to_string()));\n\n// Bug 2 (only relevant for `near_sdk::collections`, not `near_sdk::store`): Nested\n// collection is modified without updating the collection itself in the outer collection.\n//\n// This is fixed at the type level in `near_sdk::store` because the values are modified\n// in-place and guarded by regular Rust borrow-checker rules.\nroot.insert(&2, &UnorderedSet::new(StorageKey::Nested(2)));\n\nlet mut nested = root.get(&2).unwrap();\nnested.insert(&"some value".to_string());\n\n// This line would fix the bug:\n// root.insert(&2, &nested);\n\nlet n = root.get(&2).unwrap();\nassert!(n.is_empty());\nassert!(n.contains(&"some value".to_string()));\n'})})]})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"pagination",children:"Pagination"}),"\n",(0,s.jsxs)(t.p,{children:["Persistent collections such as ",(0,s.jsx)(t.code,{children:"UnorderedMap"}),", ",(0,s.jsx)(t.code,{children:"UnorderedSet"})," and ",(0,s.jsx)(t.code,{children:"Vector"})," may\ncontain more elements than the amount of gas available to read them all.\nIn order to expose them all through view calls, we can use pagination."]}),"\n",(0,s.jsxs)(t.p,{children:["This can be done using iterators with ",(0,s.jsx)(t.a,{href:"https://doc.rust-lang.org/std/iter/struct.Skip.html",children:(0,s.jsx)(t.code,{children:"Skip"})})," and ",(0,s.jsx)(t.a,{href:"https://doc.rust-lang.org/std/iter/struct.Take.html",children:(0,s.jsx)(t.code,{children:"Take"})}),". This will only load elements from storage within the range."]}),"\n",(0,s.jsxs)(t.p,{children:["Example of pagination for ",(0,s.jsx)(t.code,{children:"UnorderedMap"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:"#[near(contract_state)]\n#[derive(PanicOnDefault)]\npub struct Contract {\n    pub status_updates: UnorderedMap<AccountId, String>,\n}\n\n#[near]\nimpl Contract {\n    /// Retrieves multiple elements from the `UnorderedMap`.\n    /// - `from_index` is the index to start from.\n    /// - `limit` is the maximum number of elements to return.\n    pub fn get_updates(&self, from_index: usize, limit: usize) -> Vec<(AccountId, String)> {\n        self.status_updates\n            .iter()\n            .skip(from_index)\n            .take(limit)\n            .collect()\n    }\n}\n"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"storage-cost",children:"Storage Cost"}),"\n",(0,s.jsx)(t.p,{children:"Your contract needs to lock a portion of their balance proportional to the amount of data they stored in the blockchain. This means that:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["If more data is added and the ",(0,s.jsx)(t.strong,{children:"storage increases \u2191"}),", then your contract's ",(0,s.jsx)(t.strong,{children:"balance decreases \u2193"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["If data is deleted and the ",(0,s.jsx)(t.strong,{children:"storage decreases \u2193"}),", then your contract's ",(0,s.jsx)(t.strong,{children:"balance increases \u2191"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Currently, it cost approximately ",(0,s.jsx)(t.strong,{children:"1 \u24c3"})," to store ",(0,s.jsx)(t.strong,{children:"100kb"})," of data."]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["You can save on smart contract storage if using NEAR Account IDs by encoding them using base32. Since they consist of ",(0,s.jsx)(t.code,{children:"[a-z.-_]"})," characters with a maximum length of 64 characters, they can be encoded using 5 bits per character, with terminal ",(0,s.jsx)(t.code,{children:"\\0"}),". Going to a size of 65 * 5 = 325 bits from the original (64 + 4) * 8 = 544 bits. This is a 40% reduction in storage costs"]})}),"\n",(0,s.jsx)(t.admonition,{type:"caution",children:(0,s.jsx)(t.p,{children:"Your contract will panic if you try to store data but don't have NEAR to cover its storage cost"})}),"\n",(0,s.jsx)(t.admonition,{type:"warning",children:(0,s.jsxs)(t.p,{children:["Be mindful of potential ",(0,s.jsx)(t.a,{href:"/vi/build/smart-contracts/security/storage",children:"small deposit attacks"})]})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h2,{id:"storage-constraints-on-near",children:"Storage Constraints on NEAR"}),"\n",(0,s.jsx)(t.p,{children:"For storing data on-chain it\u2019s important to keep in mind the following:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"There is a 4mb limit on how much you can upload at once"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Let\u2019s say for example, someone wants to put an NFT purely on-chain (rather than IPFS or some other decentralized storage solution) you\u2019ll have almost an unlimited amount of storage but will have to pay 1 $NEAR per 100kb of storage used."}),"\n",(0,s.jsx)(t.p,{children:"Users will be limited to 4MB per contract call upload due to MAX_GAS constraints. The maximum amount of gas one can attach to a given functionCall is 300TGas."})]})}function p(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}},85162:(e,t,n)=>{n.d(t,{Z:()=>a});n(67294);var s=n(36905);const r={tabItem:"tabItem_Ymn6"};var i=n(85893);function a(e){var t=e.children,n=e.hidden,a=e.className;return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.Z)(r.tabItem,a),hidden:n,children:t})}},74866:(e,t,n)=>{n.d(t,{Z:()=>w});var s=n(67294),r=n(36905),i=n(12466),a=n(16550),l=n(20469),o=n(91980),c=n(67392),d=n(50012);function h(e){var t,n;return null!=(t=null==(n=s.Children.toArray(e).filter((function(e){return"\n"!==e})).map((function(e){if(!e||(0,s.isValidElement)(e)&&((t=e.props)&&"object"==typeof t&&"value"in t))return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:n.filter(Boolean))?t:[]}function u(e){var t=e.values,n=e.children;return(0,s.useMemo)((function(){var e=null!=t?t:function(e){return h(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}(n);return function(e){var t=(0,c.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,n])}function x(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function p(e){var t=e.queryString,n=void 0!==t&&t,r=e.groupId,i=(0,a.k6)(),l=function(e){var t=e.queryString,n=void 0!==t&&t,s=e.groupId;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!s)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=s?s:null}({queryString:n,groupId:r});return[(0,o._X)(l),(0,s.useCallback)((function(e){if(l){var t=new URLSearchParams(i.location.search);t.set(l,e),i.replace(Object.assign({},i.location,{search:t.toString()}))}}),[l,i])]}function m(e){var t,n,r,i,a=e.defaultValue,o=e.queryString,c=void 0!==o&&o,h=e.groupId,m=u(e),j=(0,s.useState)((function(){return function(e){var t,n=e.defaultValue,s=e.tabValues;if(0===s.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!x({value:n,tabValues:s}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+n+'" but none of its children has the corresponding value. Available values are: '+s.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return n}var r=null!=(t=s.find((function(e){return e.default})))?t:s[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:a,tabValues:m})})),g=j[0],f=j[1],b=p({queryString:c,groupId:h}),v=b[0],y=b[1],w=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:h}.groupId),n=(0,d.Nk)(t),r=n[0],i=n[1],[r,(0,s.useCallback)((function(e){t&&i.set(e)}),[t,i])]),S=w[0],k=w[1],A=function(){var e=null!=v?v:S;return x({value:e,tabValues:m})?e:null}();return(0,l.Z)((function(){A&&f(A)}),[A]),{selectedValue:g,selectValue:(0,s.useCallback)((function(e){if(!x({value:e,tabValues:m}))throw new Error("Can't select invalid tab value="+e);f(e),y(e),k(e)}),[y,k,m]),tabValues:m}}var j=n(72389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=n(85893);function b(e){var t=e.className,n=e.block,s=e.selectedValue,a=e.selectValue,l=e.tabValues,o=[],c=(0,i.o5)().blockElementScrollPositionUntilNextRender,d=function(e){var t=e.currentTarget,n=o.indexOf(t),r=l[n].value;r!==s&&(c(t),a(r))},h=function(e){var t,n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":var s,r=o.indexOf(e.currentTarget)+1;n=null!=(s=o[r])?s:o[0];break;case"ArrowLeft":var i,a=o.indexOf(e.currentTarget)-1;n=null!=(i=o[a])?i:o[o.length-1]}null==(t=n)||t.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t),children:l.map((function(e){var t=e.value,n=e.label,i=e.attributes;return(0,f.jsx)("li",Object.assign({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:function(e){return o.push(e)},onKeyDown:h,onClick:d},i,{className:(0,r.Z)("tabs__item",g.tabItem,null==i?void 0:i.className,{"tabs__item--active":s===t}),children:null!=n?n:t}),t)}))})}function v(e){var t=e.lazy,n=e.children,r=e.selectedValue,i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){var a=i.find((function(e){return e.props.value===r}));return a?(0,s.cloneElement)(a,{className:"margin-top--md"}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:i.map((function(e,t){return(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==r})}))})}function y(e){var t=m(e);return(0,f.jsxs)("div",{className:(0,r.Z)("tabs-container",g.tabList),children:[(0,f.jsx)(b,Object.assign({},t,e)),(0,f.jsx)(v,Object.assign({},t,e))]})}function w(e){var t=(0,j.Z)();return(0,f.jsx)(y,Object.assign({},e,{children:h(e.children)}),String(t))}},71183:(e,t,n)=>{n.d(t,{O2:()=>p,Ey:()=>j,SQ:()=>m});var s=n(67294),r=n(74866),i=n(85162),a=n(74165),l=n(15861),o=n(1841),c=n.n(o),d=n(85893);function h(){return(h=(0,l.Z)((0,a.Z)().mark((function e(t,n,s){var r,i,l,o;return(0,a.Z)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!((i=localStorage.getItem(t+"-until"))&&i>Date.now())){e.next=5;break}r=localStorage.getItem(t),e.next=18;break;case 5:return e.prev=5,e.next=8,fetch(t);case 8:return e.next=10,e.sent.text();case 10:r=e.sent,localStorage.setItem(t,r),localStorage.setItem(t+"-until",Date.now()+6e4),e.next=18;break;case 15:return e.prev=15,e.t0=e.catch(5),e.abrupt("return","Error fetching code, please try reloading");case 18:return l=r.split("\n"),n=n?Number(n)-1:0,s=s?Number(s):l.length,l=l.slice(n,s),o=l.reduce((function(e,t){if(0===t.length)return e;var n=t.match(/^\s+/);return n?Math.min(e,n[0].length):0}),1/0),e.abrupt("return",l.map((function(e){return e.slice(o)})).join("\n"));case 24:case"end":return e.stop()}}),e,null,[[5,15]])})))).apply(this,arguments)}const u=function(e){var t=e.url,n=e.start,r=e.end,i=e.language,a=e.fname,l=e.metastring,o=(0,s.useState)("Loading..."),u=o[0],x=o[1];return(0,s.useEffect)((function(){var e=function(e){var t=e.slice(e.indexOf("https")).split("#"),n=t[0],s=(t[1],new URL(n).pathname.split("/").slice(1)),r=s[0],i=s[1];return s[2],"https://raw.githubusercontent.com/"+r+"/"+i+"/"+s[3]+"/"+s.slice(4).join("/")}(t),s=function(e,t,n){return h.apply(this,arguments)}(e,n,r);s.then((function(e){return x(e)}))})),(0,d.jsxs)("div",{fname:a,children:[(0,d.jsx)(c(),{language:i,metastring:l+" showLineNumbers",children:u}),(0,d.jsx)("div",{style:{fontSize:"0.9em",fontWeight:600,color:"rgb(14, 117, 221)",textAlign:"center",paddingBottom:"13px",textDecoration:"underline"},children:(0,d.jsx)("a",{href:t,target:"_blank",rel:"noreferrer noopener",children:"See full example on GitHub"})})]})};var x={rust:"\ud83e\udd80 Rust",js:"\ud83c\udf10 Javascript",ts:"\ud83c\udf10 Typescript"};function p(e){var t=e.children;return Array.isArray(t)||(t=[t]),(0,d.jsx)(r.Z,{className:"language-tabs",groupId:"code-tabs",children:t.map((function(e,t){return(0,d.jsx)(i.Z,{value:e.props.value,label:x[e.props.value],children:e})}))})}function m(e){var t=e.children,n=e.language;return Array.isArray(t)||(t=[t]),t=t.map((function(e){return function(e,t){var n=e.props,s=(n.children,n.url),r=n.start,i=n.end,a=n.fname;if(e.type===j)return j({url:s,start:r,end:i,language:t,fname:a});return e}(e,n)})),1==t.length?(0,d.jsx)(i.Z,{value:0,label:t[0].props.fname,children:t[0]}):(0,d.jsx)(r.Z,{className:"file-tabs",children:t.map((function(e,t){return(0,d.jsx)(i.Z,{value:t,label:e.props.fname,children:e})}))})}function j(e){var t=e.url,n=e.start,s=e.end,r=e.language,i=e.fname,a=e.metastring;return u({url:t,start:n,end:s,language:r,fname:i,metastring:a})}}}]);