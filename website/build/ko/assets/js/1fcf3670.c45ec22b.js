"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1645],{87759:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var r=t(85893),s=t(11151);const o={sidebar_position:3},c="\uceec\ub809\uc158 \uc911\ucca9(Nesting)",a={id:"sdk/rust/contract-structure/nesting",title:"\uceec\ub809\uc158 \uc911\ucca9(Nesting)",description:"\uace0\uc720 \uc811\ub450\uc0ac\uc5d0 \ub300\ud55c \uae30\uc874 \uc811\uadfc\ubc95",source:"@site/i18n/ko/docusaurus-plugin-content-docs/current/sdk/rust/contract-structure/nesting.md",sourceDirName:"sdk/rust/contract-structure",slug:"/sdk/rust/contract-structure/nesting",permalink:"/ko/sdk/rust/contract-structure/nesting",draft:!1,unlisted:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/sdk/rust/contract-structure/nesting.md",tags:[],version:"current",lastUpdatedBy:"Github Actions",lastUpdatedAt:1718378911e3,sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tools",previous:{title:"\uceec\ub809\uc158",permalink:"/ko/sdk/rust/contract-structure/collections"},next:{title:"\ud37c\ube14\ub9ad \uba54\uc11c\ub4dc \uc790\ub8cc\ud615",permalink:"/ko/sdk/rust/contract-interface/public-methods"}},i={},d=[{value:"\uace0\uc720 \uc811\ub450\uc0ac\uc5d0 \ub300\ud55c \uae30\uc874 \uc811\uadfc\ubc95",id:"\uace0\uc720-\uc811\ub450\uc0ac\uc5d0-\ub300\ud55c-\uae30\uc874-\uc811\uadfc\ubc95",level:2},{value:"\uc601\uad6c \uceec\ub809\uc158\uc5d0 \ub300\ud55c \uace0\uc720 \uc811\ub450\uc0ac \uc0dd\uc131",id:"\uc601\uad6c-\uceec\ub809\uc158\uc5d0-\ub300\ud55c-\uace0\uc720-\uc811\ub450\uc0ac-\uc0dd\uc131",level:2},{value:"\uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc26c\uc6b4 \ud328\ud134",id:"\uc624\ub958\uac00-\ubc1c\uc0dd\ud558\uae30-\uc26c\uc6b4-\ud328\ud134",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"\uceec\ub809\uc158-\uc911\ucca9nesting",children:"\uceec\ub809\uc158 \uc911\ucca9(Nesting)"}),"\n",(0,r.jsx)(n.h2,{id:"\uace0\uc720-\uc811\ub450\uc0ac\uc5d0-\ub300\ud55c-\uae30\uc874-\uc811\uadfc\ubc95",children:"\uace0\uc720 \uc811\ub450\uc0ac\uc5d0 \ub300\ud55c \uae30\uc874 \uc811\uadfc\ubc95"}),"\n",(0,r.jsx)(n.p,{children:"\uc6d0\ub798\ub294 \ubc14\uc774\ud2b8 \ubca1\ud130\ub85c \ubcc0\ud658\ub41c \uc9e7\uc740 \ud55c \uae00\uc790 \uc811\ub450\uc0ac\ub97c \uc0ac\uc6a9\ud558\uc5ec, \uc0dd\uc131\uc790(constructor)\uc5d0\uc11c \uc811\ub450\uc0ac\ub97c \ud558\ub4dc\ucf54\ub529\ud558\uc600\uc2b5\ub2c8\ub2e4. \uc911\ucca9 \uceec\ub809\uc158\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 \uc811\ub450\uc0ac\ub97c \uc218\ub3d9\uc73c\ub85c \uad6c\uc131\ud574\uc57c \ud569\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use near_sdk::borsh::{self};\nuse near_sdk::collections::{UnorderedMap, UnorderedSet};\nuse near_sdk::{near, AccountId};\n\n#[near(contract_state)]\npub struct Contract {\n    pub accounts: UnorderedMap<AccountId, UnorderedSet<String>>,\n}\n\nimpl Default for Contract {\n    fn default() -> Self {\n        Self {\n            accounts: UnorderedMap::new(b"t"),\n        }\n    }\n}\n\n#[near]\nimpl Contract {\n    pub fn get_tokens(&self, account_id: &AccountId) -> Vec<String> {\n        let tokens = self.accounts.get(account_id).unwrap_or_else(|| {\n            // Constructing a unique prefix for a nested UnorderedSet from a concatenation\n            // of a prefix and a hash of the account id.\n            let prefix: Vec<u8> = [\n                b"s".as_slice(),\n                &near_sdk::env::sha256_array(account_id.as_bytes()),\n            ]\n            .concat();\n            UnorderedSet::new(prefix)\n        });\n        tokens.to_vec()\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"\uc601\uad6c-\uceec\ub809\uc158\uc5d0-\ub300\ud55c-\uace0\uc720-\uc811\ub450\uc0ac-\uc0dd\uc131",children:"\uc601\uad6c \uceec\ub809\uc158\uc5d0 \ub300\ud55c \uace0\uc720 \uc811\ub450\uc0ac \uc0dd\uc131"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/ko/sdk/rust/contract-structure/collections",children:"\uc774 \ubb38\uc11c"})," \ub610\ub294 ",(0,r.jsx)(n.a,{href:"https://docs.rs/near-sdk/latest/near_sdk/collections",children:"Rust \ubb38\uc11c"}),"\uc5d0\uc11c \uc601\uad6c \uceec\ub809\uc158\uc5d0 \ub300\ud574 \uc790\uc138\ud788 \uc77d\uc5b4\ubcf4\uc138\uc694."]}),"\n",(0,r.jsxs)(n.p,{children:["\uc601\uad6c \uceec\ub809\uc158\uc758 \ubaa8\ub4e0 \uc778\uc2a4\ud134\uc2a4\uc5d0\ub294 \uace0\uc720\ud55c \uc2a4\ud1a0\ub9ac\uc9c0 \uc811\ub450\uc0ac\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \uc811\ub450\uc0ac\ub294 \uc601\uad6c \uc2a4\ud1a0\ub9ac\uc9c0\uc5d0 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud558\uae30 \uc704\ud55c \ub0b4\ubd80 \ud0a4\ub97c \uc0dd\uc131\ud558\ub294 \ub370 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ub0b4\ubd80 \ud0a4\ub294 \ucda9\ub3cc(",(0,r.jsx)(n.code,{children:"STATE"})," key\uc640\uc758 \ucda9\ub3cc \ud3ec\ud568)\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud574, \uace0\uc720\ud574\uc57c \ud569\ub2c8\ub2e4."]}),"\n",(0,r.jsx)(n.p,{children:"\ucee8\ud2b8\ub799\ud2b8\uac00 \ubcf5\uc7a1\ud574\uc9c0\uba74, \ubaa8\ub450 \uae30\ubcf8 \uad6c\uc870\uc758 \uc77c\ubd80\uac00 \uc544\ub2c8\ub77c \ud558\uc704 \uad6c\uc870 \ub610\ub294 \uc911\ucca9\ub41c \uceec\ub809\uc158\uc758 \uc77c\ubd80\ub85c \uc5ec\ub7ec \ub2e4\ub978 \uceec\ub809\uc158\uc774 \uc874\uc7ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub450 \uace0\uc720\ud55c \uc811\ub450\uc0ac\uac00 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4."}),"\n",(0,r.jsxs)(n.p,{children:["\uc2a4\ud1a0\ub9ac\uc9c0 \uc811\ub450\uc0ac \ubc0f \ud0a4\ub97c \ucd94\uc801\ud558\uae30 \uc704\ud574 ",(0,r.jsx)(n.code,{children:"enum"}),"\uc744 \ub3c4\uc785\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c borsh \uc9c1\ub82c\ud654\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubaa8\ub4e0 \uceec\ub809\uc158\uc5d0 \ub300\ud574 \uace0\uc720\ud55c \uc811\ub450\uc0ac\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. Borsh \uc9c1\ub82c\ud654\ub97c \uc0ac\uc6a9\ud558\uba74 \uc5f4\uac70\ud615(enum)\uc774 1\ubc14\uc774\ud2b8\ub9cc \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0, \uc218\ub3d9\uc73c\ub85c \uc811\ub450\uc0ac\ub97c \uad6c\uc131\ud558\ub294 \uac83\ub9cc\ud07c \ud6a8\uc728\uc801\uc785\ub2c8\ub2e4."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};\nuse near_sdk::collections::{UnorderedMap, UnorderedSet};\nuse near_sdk::{env, near, AccountId, BorshStorageKey, CryptoHash};\n\n#[near(contract_state)]\npub struct Contract {\n    pub accounts: UnorderedMap<AccountId, UnorderedSet<String>>,\n}\n\nimpl Default for Contract {\n    fn default() -> Self {\n        Self {\n            accounts: UnorderedMap::new(StorageKeys::Accounts),\n        }\n    }\n}\n\n#[near(serializers = [borsh])]\npub enum StorageKeys {\n    Accounts,\n    SubAccount { account_hash: CryptoHash },\n}\n\n#[near]\nimpl Contract {\n    pub fn get_tokens(&self, account_id: &AccountId) -> Vec<String> {\n        let tokens = self.accounts.get(account_id).unwrap_or_else(|| {\n            UnorderedSet::new(StorageKeys::SubAccount {\n                account_hash: env::sha256_array(account_id.as_bytes()),\n            })\n        });\n        tokens.to_vec()\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\uc624\ub958\uac00-\ubc1c\uc0dd\ud558\uae30-\uc26c\uc6b4-\ud328\ud134",children:"\uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc26c\uc6b4 \ud328\ud134"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"/ko/sdk/rust/contract-structure/collections#error-prone-patterns",children:"\uceec\ub809\uc158 \uc139\uc158"}),"\uc5d0\uc11c \uc5b8\uae09\ud55c \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc26c\uc6b4 \ud328\ud134\uc744 \ud655\uc7a5\ud558\uc5ec, \uc911\ucca9 \uceec\ub809\uc158\uc744 \uc0ac\uc6a9\ud560 \ub54c \uc774\ub7ec\ud55c \ubc84\uadf8\uac00 \ucee8\ud2b8\ub799\ud2b8\uc5d0 \uc5b4\ub5bb\uac8c \uc27d\uac8c \ub3c4\uc785\ub420 \uc218 \uc788\ub294\uc9c0 \uc5fc\ub450\uc5d0 \ub450\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4."]}),"\n",(0,r.jsx)(n.p,{children:"\ub354 \ub113\uc740 \ub9e5\ub77d\uc5d0\uc11c \ubc1c\uc0dd\ud560 \uc218 \uc788\ub294 \uba87 \uac00\uc9c0 \ubb38\uc81c\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/near/near-sdk-rs/issues/560",children:"https://github.com/near/near-sdk-rs/issues/560"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/near/near-sdk-rs/issues/703",children:"https://github.com/near/near-sdk-rs/issues/703"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\ub2e4\uc74c \uc0ac\ub840\ub294 \uc790\ub8cc\ud615 \uc218\uc900\uc5d0\uc11c \uc81c\ud55c\ud560 \uc218 \uc5c6\ub294, \uac00\uc7a5 \uc77c\ubc18\uc801\uc73c\ub85c \ubc1c\uc0dd\ud558\ub294 \ubc84\uadf8\uc785\ub2c8\ub2e4."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use near_sdk::borsh::{self, BorshSerialize};\nuse near_sdk::collections::{LookupMap, UnorderedSet};\nuse near_sdk::BorshStorageKey;\n\n#[derive(BorshStorageKey, BorshSerialize)]\npub enum StorageKey {\n    Root,\n    Nested(u8),\n}\n\n// Bug 1: Nested collection is removed without clearing it\'s own state.\nlet mut root: LookupMap<u8, UnorderedSet<String>> = LookupMap::new(StorageKey::Root);\nlet mut nested = UnorderedSet::new(StorageKey::Nested(1));\nnested.insert(&"test".to_string());\nroot.insert(&1, &nested);\n\n// Remove inserted collection without clearing it\'s sub-state.\nlet mut _removed = root.remove(&1).unwrap();\n\n// This line would fix the bug:\n// _removed.clear();\n\n// This collection will now be in an inconsistent state if an empty UnorderedSet is put\n// in the same entry of `root`.\nroot.insert(&1, &UnorderedSet::new(StorageKey::Nested(1)));\nlet n = root.get(&1).unwrap();\nassert!(n.is_empty());\nassert!(n.contains(&"test".to_string()));\n\n// Bug 2 (only relevant for `near_sdk::collections`, not `near_sdk::store`): Nested\n// collection is modified without updating the collection itself in the outer collection.\n//\n// This is fixed at the type level in `near_sdk::store` because the values are modified\n// in-place and guarded by regular Rust borrow-checker rules.\nroot.insert(&2, &UnorderedSet::new(StorageKey::Nested(2)));\n\nlet mut nested = root.get(&2).unwrap();\nnested.insert(&"some value".to_string());\n\n// This line would fix the bug:\n// root.insert(&2, &nested);\n\nlet n = root.get(&2).unwrap();\nassert!(n.is_empty());\nassert!(n.contains(&"some value".to_string()));\n'})})]})}function l(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>c});var r=t(67294);const s={},o=r.createContext(s);function c(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);