"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6898],{27789:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var a=t(85893),r=t(11151),s=t(74866),i=t(85162);const o={id:"web-app",title:"Web Application",hide_table_of_contents:!1},l=void 0,c={id:"primitives/nft/interacting/web-app",title:"Web Application",description:"This section describes how to interact with NFT contracts from a web app.",source:"@site/../docs/7.primitives/nft/interacting/web-app.md",sourceDirName:"7.primitives/nft/interacting",slug:"/primitives/nft/interacting/web-app",permalink:"/vi/primitives/nft/interacting/web-app",draft:!1,unlisted:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/7.primitives/nft/interacting/web-app.md",tags:[],version:"current",lastUpdatedBy:"garikbesson",lastUpdatedAt:1704192266,formattedLastUpdatedAt:"2 thg 1, 2024",frontMatter:{id:"web-app",title:"Web Application",hide_table_of_contents:!1},sidebar:"primitives",previous:{title:"NEAR Component",permalink:"/vi/primitives/nft/interacting/bos"},next:{title:"Smart Contract",permalink:"/vi/primitives/nft/interacting/smart-contract"}},d={},u=[{value:"Mint a NFT",id:"mint-a-nft",level:2},{value:"Buy a NFT",id:"buy-a-nft",level:2},{value:"Query NFT data",id:"query-nft-data",level:2},{value:"Transfer a NFT",id:"transfer-a-nft",level:2},{value:"List a NFT for sale",id:"list-a-nft-for-sale",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"This section describes how to interact with NFT contracts from a web app."}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["All the examples are using a ",(0,a.jsx)(n.code,{children:"Wallet"})," object, which comes from our ",(0,a.jsx)(n.a,{href:"https://github.com/near-examples/hello-near-js/blob/master/frontend/near-wallet.js",children:"basic template"})]})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"mint-a-nft",children:"Mint a NFT"}),"\n",(0,a.jsxs)(s.Z,{children:[(0,a.jsx)(i.Z,{value:"NFT Primitive",label:"NFT Primitive",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import { Wallet } from \'./near-wallet\';\n\nconst CONTRACT_ADDRESS = "nft.primitives.near";\nconst wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS });\n \nawait wallet.callMethod({\n  method: \'nft_mint\',\n  args: {\n    token_id: "1",\n    receiver_id: "bob.near", \n    token_metadata: {\n      title: "NFT Primitive Token",\n      description: "Awesome NFT Primitive Token",\n      media: "string", // URL to associated media, preferably to decentralized, content-addressed storage\n    }\n  },\n  contractId: CONTRACT_ADDRESS,\n  deposit: 10000000000000000000000\n});\n'})})}),(0,a.jsxs)(i.Z,{value:"Paras",label:"Paras",children:[(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import { Wallet } from \'./near-wallet\';\n\nconst CONTRACT_ADDRESS = "x.paras.near";\nconst wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS });\n \nawait wallet.callMethod({\n  method: \'nft_mint\',\n  args: {\n    token_series_id: "490641",\n    receiver_id: "bob.near",\n  },\n  contractId: CONTRACT_ADDRESS,\n  deposit: 10000000000000000000000 // Depends on your NFT metadata\n});\n'})}),(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["In order to use ",(0,a.jsx)(n.code,{children:"nft_mint"})," method of the ",(0,a.jsx)(n.code,{children:"x.paras.near"})," contract you have to be a creator of a particular token series."]})})]}),(0,a.jsxs)(i.Z,{value:"Mintbase",label:"Mintbase",children:[(0,a.jsxs)(n.p,{children:["By using ",(0,a.jsx)(n.a,{href:"https://docs.near.org/tools/near-api-js/quick-reference",children:(0,a.jsx)(n.code,{children:"near-api-js"})})]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { Wallet } from './near-wallet';\n\nconst CONTRACT_ADDRESS = \"thomasettorreiv.mintbase1.near\";\nconst wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS });\n \nawait wallet.callMethod({\n  method: 'nft_batch_mint',\n  args: {\n    num_to_mint: 1,\n    owner_id: \"bob.near\",\n    metadata: {},\n  },\n  contractId: CONTRACT_ADDRESS,\n  deposit: 10000000000000000000000 // Depends on your NFT metadata\n});\n"})}),(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["In order to use ",(0,a.jsx)(n.code,{children:"nft_batch_mint"})," method of Mintbase store contract your account have to be a in the contract minters list."]})}),(0,a.jsxs)(n.p,{children:["By using ",(0,a.jsx)(n.a,{href:"https://docs.mintbase.xyz/dev/mintbase-sdk-ref/sdk/mint",children:(0,a.jsx)(n.code,{children:"Mintbase JS"})})]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { useState } from 'react';\nimport { useWallet } from '@mintbase-js/react';\nimport { execute, mint, MintArgs } from '@mintbase-js/sdk';\n\n\nexport const MintComponent = ({ media, reference, contractAddress, owner }: MintArgs): JSX.Element => {\n\n  const { selector } = useWallet();\n\n  const handleMint = async (): Promise<void> => {\n\n    const wallet = await selector.wallet();\n\n    await execute(\n      mint({ contractAddress: contractAddress, metadata: { media, reference }, ownerId: owner })\n    );\n\n  }\n\n  return (\n    <div>\n      <button onClick={handleMint}>\n        Mint\n      </button>\n    </div>\n  );\n};\n"})})]})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"buy-a-nft",children:"Buy a NFT"}),"\n",(0,a.jsxs)(s.Z,{children:[(0,a.jsxs)(i.Z,{value:"Paras",label:"Paras",default:!0,children:[(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import { Wallet } from \'./near-wallet\';\n\nconst CONTRACT_ADDRESS = "x.paras.near";\nconst wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS });\n \nawait wallet.callMethod({\n  method: \'nft_buy\',\n  args: {\n    token_series_id: "299102",\n    receiver_id: "bob.near",\n  },\n  contractId: CONTRACT_ADDRESS,\n  deposit: 205740000000000000000000 // attached deposit in yoctoNEAR, covers NFT price + storage cost\n});\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example response:"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'"299102:1"\n'})})]}),(0,a.jsxs)(i.Z,{value:"Mintbase",label:"Mintbase",children:[(0,a.jsxs)(n.p,{children:["By using ",(0,a.jsx)(n.a,{href:"https://docs.near.org/tools/near-api-js/quick-reference",children:(0,a.jsx)(n.code,{children:"near-api-js"})})]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import { Wallet } from \'./near-wallet\';\n\nconst CONTRACT_ADDRESS = "simple.market.mintbase1.near";\nconst wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS });\n \nawait wallet.callMethod({\n  method: \'buy\',\n  args: {\n    nft_contract_id: "rubennnnnnnn.mintbase1.near",\n    token_id: "38"\n  },\n  contractId: CONTRACT_ADDRESS,\n  deposit: 1000000000000000000000 // attached deposit in yoctoNEAR, covers NFT price + storage cost (optional)\n});\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example response:"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "payout": {\n    "rub3n.near": "889200000000000000000",\n    "rubenm4rcus.near": "85800000000000000000"\n  }\n}\n'})}),(0,a.jsxs)(n.p,{children:["By using ",(0,a.jsx)(n.a,{href:"https://docs.mintbase.xyz/dev/mintbase-sdk-ref/sdk/buy",children:(0,a.jsx)(n.code,{children:"Mintbase JS"})})]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { useState } from 'react';\nimport { useWallet } from '@mintbase-js/react';\nimport { execute, burn, BuyArgs } from '@mintbase-js/sdk';\n\n\nexport const BuyComponent = ({ contractAddress, price, tokenId, affiliateAccount, marketId }:BuyArgs): JSX.Element => {\n\n  const { selector } = useWallet();\n\n  const handleBuy = async (): Promise<void> => {\n\n    const wallet = await selector.wallet();\n\n    const buyArgs = {contractAddress: contractAddress, tokenId: tokenId, affiliateAccount: affiliateAccount , marketId:marketId, price:price }\n\n    await execute(\n      {wallet},\n      buy(buyArgs)\n    );\n\n  }\n\n  return (\n    <div>\n      <button onClick={handleBuy}>\n        Burn provided token array from {contractAddress}\n      </button>\n    </div>\n  );\n};\n"})})]})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"query-nft-data",children:"Query NFT data"}),"\n",(0,a.jsxs)(s.Z,{children:[(0,a.jsxs)(i.Z,{value:"NFT Primitive",label:"NFT Primitive",default:!0,children:[(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { Wallet } from './near-wallet';\n\nconst CONTRACT_ADDRESS = \"nft.primitives.near\";\nconst wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS });\n \nconst response = await wallet.viewMethod({\n  method: 'nft_token',\n  args: {\n    token_id: \"1\"\n  }\n});\n"})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example response:"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "token_id": "1",\n  "owner_id": "bob.near",\n  "metadata": {\n    "title": "string", // ex. "Arch Nemesis: Mail Carrier" or "Parcel #5055"\n    "description": "string", // free-form description\n    "media": "string", // URL to associated media, preferably to decentralized, content-addressed storage\n    "media_hash": "string", // Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.\n    "copies": 1, // number of copies of this set of metadata in existence when token was minted.\n    "issued_at": 1642053411068358156, // When token was issued or minted, Unix epoch in milliseconds\n    "expires_at": 1642053411168358156, // When token expires, Unix epoch in milliseconds\n    "starts_at": 1642053411068358156, // When token starts being valid, Unix epoch in milliseconds\n    "updated_at": 1642053411068358156, // When token was last updated, Unix epoch in milliseconds\n    "extra": "string", // anything extra the NFT wants to store on-chain. Can be stringified JSON.\n    "reference": "string", // URL to an off-chain JSON file with more info.\n    "reference_hash": "string" // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.\n  }\n}\n'})})]}),(0,a.jsxs)(i.Z,{value:"Paras",label:"Paras",children:[(0,a.jsxs)(n.p,{children:["By using ",(0,a.jsx)(n.a,{href:"https://docs.near.org/tools/near-api-js/quick-reference",children:(0,a.jsx)(n.code,{children:"near-api-js"})})]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { Wallet } from './near-wallet';\n\nconst CONTRACT_ADDRESS = \"x.paras.near\";\nconst wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS });\n \nconst response = await wallet.viewMethod({\n  method: 'nft_token',\n  args: {\n    token_id: \"84686:1154\"\n  }\n});\n"})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example response:"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "token_id": "84686:1154",\n  "owner_id": "bob.near",\n  "metadata": {\n    "title": "Tokenfox Silver Coin #1154",\n    "description": null,\n    "media": "bafkreihpapfu7rzsmejjgl2twllge6pbrfmqaahj2wkz6nq55c6trhhtrq",\n    "media_hash": null,\n    "copies": 4063,\n    "issued_at": "1642053411068358156",\n    "expires_at": null,\n    "starts_at": null,\n    "updated_at": null,\n    "extra": null,\n    "reference": "bafkreib6uj5kxbadfvf6qes5flema7jx6u5dj5zyqcneaoyqqzlm6kpu5a",\n    "reference_hash": null\n  },\n  "approved_account_ids": {}\n}\n'})}),(0,a.jsx)(n.p,{children:"By calling a Paras API method"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const tokenData = fetch("https://api-v2-mainnet.paras.id/token?token_id=84686:1154");\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example response:"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "status": 1,\n  "data": {\n    "results": [\n      {\n        "_id": "61dfbf27284abc1cc0b87c9d",\n        "contract_id": "x.paras.near",\n        "token_id": "84686:1154",\n        "owner_id": "bob.near",\n        "token_series_id": "84686",\n        "edition_id": "1154",\n        "metadata": {\n          "title": "Tokenfox Silver Coin #1154",\n          "description": "Holding this silver coin in your wallet will bring you health and happiness \\uD83D\\uDE0A",\n          "media": "bafkreihpapfu7rzsmejjgl2twllge6pbrfmqaahj2wkz6nq55c6trhhtrq",\n          "media_hash": null,\n          "copies": 4063,\n          "issued_at": null,\n          "expires_at": null,\n          "starts_at": null,\n          "updated_at": null,\n          "extra": null,\n          "reference": "bafkreib6uj5kxbadfvf6qes5flema7jx6u5dj5zyqcneaoyqqzlm6kpu5a",\n          "reference_hash": null,\n          "collection": "Tokenfox Collection Cards",\n          "collection_id": "tokenfox-collection-cards-by-tokenfoxnear",\n          "creator_id": "tokenfox.near",\n          "blurhash": "U7F~gc00_3D%00~q4n%M_39F-;RjM{xuWBRj",\n          "score": 0,\n          "mime_type": "image/png"\n        },\n        "royalty": {\n          "tokenfox.near": 1000\n        },\n        "price": null,\n        "approval_id": null,\n        "ft_token_id": null,\n        "has_price": null,\n        "is_creator": true,\n        "total_likes": 8,\n        "likes": null,\n        "categories": [],\n        "view": 4\n      }\n    ],\n    "count": 1,\n    "skip": 0,\n    "limit": 10\n  }\n}\n'})}),(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["See the ",(0,a.jsx)(n.a,{href:"https://parashq.github.io/",children:"Paras API documentation"})," for the full list of methods."]})}),(0,a.jsxs)(n.admonition,{type:"note",children:[(0,a.jsx)(n.p,{children:"When you call Paras smart contract method it returns data that are stored in the Paras NFT smart contract. It means a response contains only data about NFTs which were minted via Paras NFT contract."}),(0,a.jsxs)(n.p,{children:["When you call Paras API methods it returns data from other NFT contracts as well, due to the work of the indexer. It means you might want to pass more parameters like ",(0,a.jsx)(n.code,{children:"contract_id"})," or ",(0,a.jsx)(n.code,{children:"owner_id"})," to make the response more accurate."]})]})]}),(0,a.jsxs)(i.Z,{value:"Mintbase",label:"Mintbase",children:[(0,a.jsxs)(n.p,{children:["By using ",(0,a.jsx)(n.a,{href:"https://docs.near.org/tools/near-api-js/quick-reference",children:(0,a.jsx)(n.code,{children:"near-api-js"})})]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { Wallet } from './near-wallet';\n\nconst CONTRACT_ADDRESS = \"anthropocene.mintbase1.near\";\nconst wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS });\n \nconst response = await wallet.viewMethod({\n  method: 'nft_token',\n  args: {\n    token_id: \"17960\"\n  }\n});\n"})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example response:"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "token_id": "17960",\n  "owner_id": "876f40299dd919f39252863e2136c4e1922cd5f78759215474cbc8f1fc361e14",\n  "approved_account_ids": {},\n  "metadata": {\n    "title": null,\n    "description": null,\n    "media": null,\n    "media_hash": null,\n    "copies": 1,\n    "issued_at": null,\n    "expires_at": null,\n    "starts_at": null,\n    "updated_at": null,\n    "extra": null,\n    "reference": "F-30s_uQ3ZdAHZClY4DYatDPapaIRNLju41RxfMXC24",\n    "reference_hash": null\n  },\n  "royalty": {\n    "split_between": {\n      "seventhage.near": {\n        "numerator": 10000\n      }\n    },\n    "percentage": {\n      "numerator": 100\n    }\n  },\n  "split_owners": null,\n  "minter": "anthropocene.seventhage.near",\n  "loan": null,\n  "composeable_stats": { "local_depth": 0, "cross_contract_children": 0 },\n  "origin_key": null\n}\n'})}),(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["When someone creates a NFT on Mintbase they need to deploy their own NFT contract using Mintbase factory. Those smart contract are subaccounts of mintbase1.near, e.g. ",(0,a.jsx)(n.code,{children:"anthropocene.mintbase1.near"}),"."]})}),(0,a.jsx)(n.p,{children:"By calling a Mintbase GraphQL API method"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'const tokenData = fetch("https://graph.mintbase.xyz", {\n  method: "POST",\n  headers: {\n    "mb-api-key": "anon",\n    "Content-Type": "application/json",\n    "x-hasura-role": "anonymous",\n  },\n  body: JSON.stringify({\n    query: `\n      query getToken{\n        tokens: nft_tokens(\n          where: {\n            token_id: { _eq: "84686:1154" }\n          }\n        ) {\n          tokenId: token_id\n          ownerId: owner\n          contractId: nft_contract_id\n          reference\n          issuedAt: issued_at\n          copies\n          metadataId: metadata_id\n        }\n      }\n    `,\n  }),\n});\n'})}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example response:"})}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "ok": true,\n  "status": 200,\n  "contentType": "application/json",\n  "body": {\n    "data": {\n      "tokens": [\n        {\n          "tokenId": "84686:1154",\n          "ownerId": "bob.near",\n          "contractId": "x.paras.near",\n          "reference": "bafkreib6uj5kxbadfvf6qes5flema7jx6u5dj5zyqcneaoyqqzlm6kpu5a",\n          "issuedAt": "2022-01-13T05:56:51.068358",\n          "copies": 4063,\n          "metadataId": "x.paras.near:5210047642790498956c9669d6a37b98"\n        }\n      ]\n    }\n  }\n}\n'})}),(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["In the future, users may be required to register using an api key. For now, simply passing the valueanon for ",(0,a.jsx)(n.code,{children:"mb-api-key"})," will work."]})}),(0,a.jsxs)(n.p,{children:["By using ",(0,a.jsx)(n.a,{href:"https://docs.mintbase.xyz/dev/mintbase-sdk-ref/data/api/tokenbyid",children:(0,a.jsx)(n.code,{children:"Mintbase JS"})})]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { tokenById } from  '@mintbase-js/data'\n\nconst { data, error } = await tokenById( '1','rub3n.testnet');\n\nif (error) {console.log('error', error)}\n\n\nconsole.log(data.tokenData[0]) // => token metadata\n"})})]})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"transfer-a-nft",children:"Transfer a NFT"}),"\n",(0,a.jsxs)(s.Z,{children:[(0,a.jsx)(i.Z,{value:"NFT Primitive",label:"NFT Primitive",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import { Wallet } from \'./near-wallet\';\n\nconst CONTRACT_ADDRESS = "nft.primitives.near";\nconst wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS });\n \nawait wallet.callMethod({\n  method: \'nft_transfer\',\n  args: {\n    token_id: "1",\n    receiver_id: "bob.near"\n  },\n  contractId: CONTRACT_ADDRESS,\n  deposit: 1\n});\n'})})}),(0,a.jsx)(i.Z,{value:"Paras",label:"Paras",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import { Wallet } from \'./near-wallet\';\n\nconst CONTRACT_ADDRESS = "x.paras.near";\nconst wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS });\n \nawait wallet.callMethod({\n  method: \'nft_transfer\',\n  args: {\n    token_id: "490641",\n    receiver_id: "bob.near"\n  },\n  contractId: CONTRACT_ADDRESS,\n  deposit: 1\n});\n'})})}),(0,a.jsxs)(i.Z,{value:"Mintbase",label:"Mintbase",children:[(0,a.jsxs)(n.p,{children:["By using ",(0,a.jsx)(n.a,{href:"https://docs.near.org/tools/near-api-js/quick-reference",children:(0,a.jsx)(n.code,{children:"near-api-js"})})]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import { Wallet } from \'./near-wallet\';\n\nconst CONTRACT_ADDRESS = "thomasettorreiv.mintbase1.near";\nconst wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS });\n \nawait wallet.callMethod({\n  method: \'nft_transfer\',\n  args: {\n    token_id: "490641",\n    receiver_id: "bob.near"\n  },\n  contractId: CONTRACT_ADDRESS,\n  deposit: 1\n});\n'})}),(0,a.jsxs)(n.p,{children:["By using ",(0,a.jsx)(n.a,{href:"https://docs.mintbase.xyz/dev/mintbase-sdk-ref/sdk/transfer",children:(0,a.jsx)(n.code,{children:"Mintbase JS"})})]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { useState } from 'react';\nimport { useWallet } from '@mintbase-js/react';\nimport { execute, transfer, TransferArgs } from '@mintbase-js/sdk';\n\nconst TransferComponent = ({ tokenId, contractAddress }: TransferArgs): JSX.Element => {\n  const { selector, activeAccountId } = useWallet();\n\n  const handleTransfer = async (): Promise<void> => {\n    const wallet = await selector.wallet();\n\n    const transferArgs: TransferArgs = {\n        contractAddress: contractAddress,\n        transfers: [{\n          receiverId: 'mb_carol.testnet',\n          tokenId: token.tokenId,\n        }],\n      }\n\n    await execute(\n      { wallet },\n      transfer(transferArgs),\n    );\n  };\n\n  return (\n    <div>\n      <button onClick={handleTransfer}>\n        Transfer {tokenId} of {contractAddress} from {activeAccountId} to Carol\n      </button>\n    </div>\n  );\n}\n"})})]})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"list-a-nft-for-sale",children:"List a NFT for sale"}),"\n",(0,a.jsxs)(n.p,{children:["Basic NFT contracts following ",(0,a.jsx)(n.a,{href:"https://nomicon.io/Standards/Tokens/NonFungibleToken",children:"the NEP-171 and NEP-177 standards"})," do not implement marketplace functionality."]}),"\n",(0,a.jsxs)(n.p,{children:["For this purpose, there are ecosystem apps such as ",(0,a.jsx)(n.a,{href:"https://paras.id/",children:"Paras"})," or ",(0,a.jsx)(n.a,{href:"https://www.mintbase.xyz/",children:"Mintbase"}),", that use dedicated marketplace contracts."]}),"\n",(0,a.jsx)(n.p,{children:"In order to put a NFT for a sale on a marketplace you need to do two actions:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Cover data storage costs in the marketplace contract."}),"\n",(0,a.jsx)(n.li,{children:"Approve the marketplace to sell the NFT in your NFT contract."}),"\n"]}),"\n",(0,a.jsxs)(s.Z,{children:[(0,a.jsxs)(i.Z,{value:"Paras",label:"Paras",children:[(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import { Wallet } from \'./near-wallet\';\n\nconst CONTRACT_ADDRESS = "marketplace.paras.near";\nconst wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS });\n \nawait wallet.callMethod({\n  method: \'storage_deposit\',\n  args: {\n    receiver_id: "bob.near"\n  },\n  contractId: CONTRACT_ADDRESS,\n  gas: 300000000000000, // attached GAS (optional)\n  deposit: 9390000000000000000 // attached deposit in yoctoNEAR (optional)\n});\n\nawait wallet.callMethod({\n  method: \'nft_approve\',\n  args: {\n    token_id: "1e95238d266e5497d735eb30",\n    account_id: "marketplace.paras.near",\n    msg: {\n      price: "200000000000000000000000",\n      market_type: "sale",\n      ft_token_id: "near"\n    }\n  },\n  contractId: "nft.primitives.near"\n});\n'})}),(0,a.jsxs)(n.p,{children:["Method ",(0,a.jsx)(n.code,{children:"nft_approve"})," of a NFT contract also calls the ",(0,a.jsx)(n.code,{children:"nft_on_approve"})," method in ",(0,a.jsx)(n.code,{children:"marketplace.paras.near"})," as a callback."]})]}),(0,a.jsxs)(i.Z,{value:"Mintbase",label:"Mintbase",children:[(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import { Wallet } from \'./near-wallet\';\n\nconst CONTRACT_ADDRESS = "simple.market.mintbase1.near";\nconst wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS });\n \nawait wallet.callMethod({\n  method: \'deposit_storage\',\n  args: {\n      autotransfer: true\n    },\n  contractId: CONTRACT_ADDRESS,\n  gas: 300000000000000, // attached GAS (optional)\n  deposit: 9390000000000000000 // attached deposit in yoctoNEAR (optional)\n});\n\nawait wallet.callMethod({\n  method: \'nft_approve\',\n  args: {\n    args: {\n      token_id: "3c46b76cbd48e65f2fc88473",\n      account_id: "simple.market.mintbase1.near",\n      msg: {\n        price: "200000000000000000000000"\n      }\n    },\n  },\n  contractId: "nft.primitives.near"\n});\n'})}),(0,a.jsxs)(n.p,{children:["Method ",(0,a.jsx)(n.code,{children:"nft_approve"})," of a NFT contract also calls the ",(0,a.jsx)(n.code,{children:"nft_on_approve"})," method in ",(0,a.jsx)(n.code,{children:"simple.market.mintbase1.near"})," as a callback."]}),(0,a.jsxs)(n.p,{children:["By using ",(0,a.jsx)(n.a,{href:"https://docs.mintbase.xyz/dev/mintbase-sdk-ref/sdk/list",children:(0,a.jsx)(n.code,{children:"Mintbase JS"})})]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { useState } from 'react';\nimport { useWallet } from '@mintbase-js/react';\nimport { execute, list, ListArgs } from '@mintbase-js/sdk';\n\n\nexport const ListComponent = ({ contractAddress, marketAddress , tokenId, price }:ListArgs):JSX.Element => {\n  \n  const { selector } = useWallet();\n\n  const handleList = async (): Promise<void> => {\n    const wallet = await selector.wallet();\n    \n    await execute(\n        {wallet},\n        list({\n         contractAddress: nftContractId, \n         marketAddress: marketId, \n         tokenId: tokenId, \n         price: price\n        })\n      )\n  }\n\n  return (\n    <div>\n      <button onClick={handleList}>\n        DeployContract with name= {name} and owner= {owner}\n      </button>\n    </div>\n  );\n};\n"})})]})]})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},85162:(e,n,t)=>{t.d(n,{Z:()=>i});t(67294);var a=t(36905);const r={tabItem:"tabItem_Ymn6"};var s=t(85893);function i(e){var n=e.children,t=e.hidden,i=e.className;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.Z)(r.tabItem,i),hidden:t,children:n})}},74866:(e,n,t)=>{t.d(n,{Z:()=>w});var a=t(67294),r=t(36905),s=t(12466),i=t(16550),o=t(20469),l=t(91980),c=t(67392),d=t(50012);function u(e){var n,t;return null!=(n=null==(t=a.Children.toArray(e).filter((function(e){return"\n"!==e})).map((function(e){if(!e||(0,a.isValidElement)(e)&&((n=e.props)&&"object"==typeof n&&"value"in n))return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?n:[]}function h(e){var n=e.values,t=e.children;return(0,a.useMemo)((function(){var e=null!=n?n:function(e){return u(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}(t);return function(e){var n=(0,c.l)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function p(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function m(e){var n=e.queryString,t=void 0!==n&&n,r=e.groupId,s=(0,i.k6)(),o=function(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:t,groupId:r});return[(0,l._X)(o),(0,a.useCallback)((function(e){if(o){var n=new URLSearchParams(s.location.search);n.set(o,e),s.replace(Object.assign({},s.location,{search:n.toString()}))}}),[o,s])]}function f(e){var n,t,r,s,i=e.defaultValue,l=e.queryString,c=void 0!==l&&l,u=e.groupId,f=h(e),x=(0,a.useState)((function(){return function(e){var n,t=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var r=null!=(n=a.find((function(e){return e.default})))?n:a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:i,tabValues:f})})),j=x[0],b=x[1],g=m({queryString:c,groupId:u}),v=g[0],_=g[1],w=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:u}.groupId),t=(0,d.Nk)(n),r=t[0],s=t[1],[r,(0,a.useCallback)((function(e){n&&s.set(e)}),[n,s])]),k=w[0],A=w[1],T=function(){var e=null!=v?v:k;return p({value:e,tabValues:f})?e:null}();return(0,o.Z)((function(){T&&b(T)}),[T]),{selectedValue:j,selectValue:(0,a.useCallback)((function(e){if(!p({value:e,tabValues:f}))throw new Error("Can't select invalid tab value="+e);b(e),_(e),A(e)}),[_,A,f]),tabValues:f}}var x=t(72389);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(85893);function g(e){var n=e.className,t=e.block,a=e.selectedValue,i=e.selectValue,o=e.tabValues,l=[],c=(0,s.o5)().blockElementScrollPositionUntilNextRender,d=function(e){var n=e.currentTarget,t=l.indexOf(n),r=o[t].value;r!==a&&(c(n),i(r))},u=function(e){var n,t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":var a,r=l.indexOf(e.currentTarget)+1;t=null!=(a=l[r])?a:l[0];break;case"ArrowLeft":var s,i=l.indexOf(e.currentTarget)-1;t=null!=(s=l[i])?s:l[l.length-1]}null==(n=t)||n.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n),children:o.map((function(e){var n=e.value,t=e.label,s=e.attributes;return(0,b.jsx)("li",Object.assign({role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:function(e){return l.push(e)},onKeyDown:u,onClick:d},s,{className:(0,r.Z)("tabs__item",j.tabItem,null==s?void 0:s.className,{"tabs__item--active":a===n}),children:null!=t?t:n}),n)}))})}function v(e){var n=e.lazy,t=e.children,r=e.selectedValue,s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){var i=s.find((function(e){return e.props.value===r}));return i?(0,a.cloneElement)(i,{className:"margin-top--md"}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:s.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})}))})}function _(e){var n=f(e);return(0,b.jsxs)("div",{className:(0,r.Z)("tabs-container",j.tabList),children:[(0,b.jsx)(g,Object.assign({},e,n)),(0,b.jsx)(v,Object.assign({},e,n))]})}function w(e){var n=(0,x.Z)();return(0,b.jsx)(_,Object.assign({},e,{children:u(e.children)}),String(n))}},11151:(e,n,t)=>{t.d(n,{Z:()=>o,a:()=>i});var a=t(67294);const r={},s=a.createContext(r);function i(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);