"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9872],{5126:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>l});var r=e(85893),a=e(11151);const c={},o=void 0,i={id:"primitives/nft/smart-contract/buy",title:"buy",description:"This is an example on how you can make your smart contract buy a NFT on some marketplace (Paras this case).",source:"@site/i18n/ko/docusaurus-plugin-content-docs/current/7.primitives/nft/smart-contract/buy.md",sourceDirName:"7.primitives/nft/smart-contract",slug:"/primitives/nft/smart-contract/buy",permalink:"/ko/primitives/nft/smart-contract/buy",draft:!1,unlisted:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/7.primitives/nft/smart-contract/buy.md",tags:[],version:"current",lastUpdatedBy:"Github Actions",lastUpdatedAt:1709152665,formattedLastUpdatedAt:"2024\ub144 2\uc6d4 28\uc77c",frontMatter:{}},s={},l=[];function u(t){const n={admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,a.a)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This is an example on how you can make your smart contract buy a NFT on some marketplace (Paras this case)."}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"Please note that in this example the contract will be the owner of the NFT, however, some marketplaces allow you to buy NFT for somebody else."})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'const NFT_MARKETPLACE_CONTRACT: &str = "paras-marketplace-v2.testnet";\n\n// Define the contract structure\n#[near_bindgen]\n#[derive(BorshDeserialize, BorshSerialize)]\npub struct Contract {\n  nft_marketplace_contract: AccountId\n}\n\nimpl Default for Contract {\n    // The default trait with which to initialize the contract\n    fn default() -> Self {\n        Self {\n          nft_marketplace_contract: NFT_MARKETPLACE_CONTRACT.parse().unwrap()\n        }\n    }\n}\n\n// Validator interface, for cross-contract calls\n#[ext_contract(ext_nft_contract)]\ntrait ExternalNftContract {\n  fn buy(&self, nft_contract_id: AccountId, token_id: TokenId, ft_token_id: Option<AccountId>, price: Option<U128>) -> Promise;\n}\n\n// Implement the contract structure\n#[near_bindgen]\nimpl Contract {\n  #[payable]\n  pub fn buy(&mut self, nft_contract_id: AccountId, token_id: TokenId, ft_token_id: Option<AccountId>, price: Option<U128>) -> Promise {\n    let promise = ext_nft_contract::ext(self.nft_marketplace_contract.clone())\n      .with_static_gas(Gas(30*TGAS))\n      .with_attached_deposit(env::attached_deposit())\n      .buy(nft_contract_id, token_id, ft_token_id, price);\n\n    return promise.then( // Create a promise to callback query_greeting_callback\n      Self::ext(env::current_account_id())\n      .with_static_gas(Gas(30*TGAS))\n      .buy_callback()\n    )\n  }\n\n  #[private] // Public - but only callable by env::current_account_id()\n  pub fn buy_callback(&self, #[callback_result] call_result: Result<(), PromiseError>) {\n    // Check if the promise succeeded\n    if call_result.is_err() {\n      log!("There was an error contacting NFT contract");\n    }\n  }\n}\n'})})]})}function d(t={}){const{wrapper:n}={...(0,a.a)(),...t.components};return n?(0,r.jsx)(n,{...t,children:(0,r.jsx)(u,{...t})}):u(t)}},11151:(t,n,e)=>{e.d(n,{Z:()=>i,a:()=>o});var r=e(67294);const a={},c=r.createContext(a);function o(t){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function i(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:o(t.components),r.createElement(c.Provider,{value:n},t.children)}}}]);