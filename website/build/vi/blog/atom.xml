<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://docs.near.org/vi/blog</id>
    <title>NEAR Documentation Blog</title>
    <updated>2024-06-05T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://docs.near.org/vi/blog"/>
    <subtitle>NEAR Documentation Blog</subtitle>
    <icon>https://docs.near.org/vi/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Getting Started on NEAR Using Windows]]></title>
        <id>https://docs.near.org/vi/blog/getting-started-on-windows</id>
        <link href="https://docs.near.org/vi/blog/getting-started-on-windows"/>
        <updated>2024-06-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this article, we will cover how to install WSL and setup a NEAR development environment on Windows.]]></summary>
        <content type="html"><![CDATA[<p>In this article, we will cover how to install WSL and setup a NEAR development environment on Windows.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="wsl">WSL<a href="https://docs.near.org/vi/blog/getting-started-on-windows#wsl" class="hash-link" aria-label="Direct link to WSL" title="Direct link to WSL">​</a></h3>
<p>WSL, or Windows Subsystem for Linux, is a compatibility layer for running Linux binary executables natively on Windows. It allows us to run a GNU/Linux environment directly on Windows without the overhead of a traditional virtual machine or dual-boot setup.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="enable-wsl-from-windows-features">Enable WSL from <code>Windows Features</code><a href="https://docs.near.org/vi/blog/getting-started-on-windows#enable-wsl-from-windows-features" class="hash-link" aria-label="Direct link to enable-wsl-from-windows-features" title="Direct link to enable-wsl-from-windows-features">​</a></h4>
<p>First of all, make sure that WSL is enabled, for this go to:
<code>Control Panel &gt; Programs &gt; Turn Windows Features on or off</code>
Scrolling down will reveal the option <code>Windows Subsystem for Linux</code>. Make sure it is enabled and press OK to confirm (you will be asked to reboot your computer).</p>
<p><img decoding="async" loading="lazy" alt="Windows Features WSL Enabled" src="https://docs.near.org/vi/assets/images/windows-features-wsl-enabled-a1476cedd8df0e961ba21dd9af59374a.jpg" width="908" height="792" class="img_ev3q"></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="start-wsl-and-install-ubuntu">Start WSL and Install Ubuntu<a href="https://docs.near.org/vi/blog/getting-started-on-windows#start-wsl-and-install-ubuntu" class="hash-link" aria-label="Direct link to Start WSL and Install Ubuntu" title="Direct link to Start WSL and Install Ubuntu">​</a></h4>
<p>Now we will spend some time in either <code>PowerShell</code> or <a href="https://apps.microsoft.com/detail/9n0dx20hk701" target="_blank" rel="noopener noreferrer">Windows Terminal</a>, which is a modern terminal application that supports various command-line tools and shells.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">wsl --install --d Ubuntu</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Sao chép vào clipboard" title="Sao chép" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Read more on WSL:</strong>
<a href="https://learn.microsoft.com/en-us/windows/wsl/install" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/en-us/windows/wsl/install</a>
<a href="https://learn.microsoft.com/en-us/windows/wsl/setup/environment" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/en-us/windows/wsl/setup/environment</a>
<a href="https://learn.microsoft.com/en-us/windows/wsl/" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/en-us/windows/wsl/</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="install-required-packages">Install Required Packages<a href="https://docs.near.org/vi/blog/getting-started-on-windows#install-required-packages" class="hash-link" aria-label="Direct link to Install Required Packages" title="Direct link to Install Required Packages">​</a></h3>
<p>Once the installation is completed you will have Ubuntu installed as any other application on Windows. Open it from the start menu and you will be dropped into the <a href="https://ubuntu.com/tutorials/command-line-for-beginners#1-overview" target="_blank" rel="noopener noreferrer">Ubuntu bash shell</a></p>
<p>Enter the following commands to install all the packages that Rust and Node might need later:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">apt-get update</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">apt-get install gcc make libudev-dev openssl pkg-config unzip -y</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Sao chép vào clipboard" title="Sao chép" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>Permission Denied?</div><div class="admonitionContent_BuS1"><p>Depending on your setup, you might need to run the commands with <code>sudo</code>. This temporarily grants your user elevated privileges to perform tasks that require higher permissions.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="setup-developer-environment">Setup Developer Environment<a href="https://docs.near.org/vi/blog/getting-started-on-windows#setup-developer-environment" class="hash-link" aria-label="Direct link to Setup Developer Environment" title="Direct link to Setup Developer Environment">​</a></h3>
<p>Now that we have WSL enabled and running Ubuntu, it is time to setup our developer environment. At NEAR we currently support using JS/TS and Rust to develop smart contracts, and JS/TS to develop web applications.</p>
<p>Bellow we will explain how to install both <code>Node.js</code> and <code>Rust</code>. If you want, you can install only one of them (e.g. if you are only planning to create a Rust contract, you don't need Node.js). However, we do recommend to install both so your environment is ready if you want to try something different later.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="node-jsts">Node (JS/TS)<a href="https://docs.near.org/vi/blog/getting-started-on-windows#node-jsts" class="hash-link" aria-label="Direct link to Node (JS/TS)" title="Direct link to Node (JS/TS)">​</a></h4>
<p>Node.js is a JavaScript runtime environment that executes code outside a web browser, enabling the development of server-side applications. In NEAR development, it can be used to write smart contracts in <a href="https://www.typescriptlang.org/" target="_blank" rel="noopener noreferrer">TypeScript</a>, as well as to create Web applications that interact with NEAR.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain"># installs nvm (Node Version Manager)</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># download and install Node.js</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">nvm install 20</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># verifies the right Node.js version is in the environment</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">node -v # should print `v20.14.0`</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># verifies the right NPM version is in the environment</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">npm -v # should print `10.7.0`</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Sao chép vào clipboard" title="Sao chép" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Read more:</strong>
<a href="https://nodejs.org/" target="_blank" rel="noopener noreferrer">NodeJS Website</a></p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="rust">Rust<a href="https://docs.near.org/vi/blog/getting-started-on-windows#rust" class="hash-link" aria-label="Direct link to Rust" title="Direct link to Rust">​</a></h4>
<p><a href="https://www.rust-lang.org/" target="_blank" rel="noopener noreferrer">Rust</a> is a programming language known for its safety and performance. It's used in NEAR development to write secure and efficient smart contracts.</p>
<p>Next, we need to add the <code>wasm32-unknown-unknown</code> toolchain. This toolchain is required because the contracts we build will be compiled to <a href="https://webassembly.org/" target="_blank" rel="noopener noreferrer">WASM</a> to run on the NEAR blockchain.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"># When prompted, press enter for default install options</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">. source $HOME/.cargo/env</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">rustup target add wasm32-unknown-unknown</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Sao chép vào clipboard" title="Sao chép" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>Read more:</strong>
<a href="https://www.rust-lang.org/learn/get-started" target="_blank" rel="noopener noreferrer">Getting Started with Rust</a></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="thats-it">That's It<a href="https://docs.near.org/vi/blog/getting-started-on-windows#thats-it" class="hash-link" aria-label="Direct link to That's It" title="Direct link to That's It">​</a></h3>
<p>At this point, we are ready to install the relevant tooling and start building on NEAR. Head over to the <a href="http://docs.near.org/build/smart-contracts/quickstart" target="_blank" rel="noopener noreferrer">Quickstart</a> section of the docs for more information or jump right into the <a href="https://github.com/near-examples" target="_blank" rel="noopener noreferrer">examples</a>.</p>]]></content>
        <author>
            <name>Lyudmil</name>
            <uri>https://github.com/flmel</uri>
        </author>
        <category label="windows" term="windows"/>
        <category label="tutorial" term="tutorial"/>
        <category label="getting-started" term="getting-started"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[It's gonna be Legen... wait for it...]]></title>
        <id>https://docs.near.org/vi/blog/yield-resume</id>
        <link href="https://docs.near.org/vi/blog/yield-resume"/>
        <updated>2024-05-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[dary! Legendary! NEAR protocol is getting updated with the ability to yield and resume computations]]></summary>
        <content type="html"><![CDATA[<p><em>dary! Legendary! NEAR protocol is getting updated with the ability to yield and resume computations</em></p>
<p><img decoding="async" loading="lazy" alt="waiting on a loop" src="https://docs.near.org/vi/assets/images/legendary-c6675258ceadd49e3a9be41e3681b136.jpg" width="798" height="347" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-problem-of-waiting">The problem of waiting<a href="https://docs.near.org/vi/blog/yield-resume#the-problem-of-waiting" class="hash-link" aria-label="Direct link to The problem of waiting" title="Direct link to The problem of waiting">​</a></h2>
<p>Currently, smart contracts have no way to wait for an external event to happen. This can be a problem when the contract relies on an external service to provide a result.</p>
<p>We encountered this issue while implementing <a href="https://docs.near.org/vi/concepts/abstraction/chain-signatures">Chain Signatures</a>, which work by requiring an external service to provide a signature.</p>
<p>Until now, the only workaround has been to make the contract call itself in a loop, checking on each iteration if the result is ready. Each call delays the result by one block (~1 second), allowing the contract to wait almost a minute before running out of gas.</p>
<p><img decoding="async" loading="lazy" alt="waiting on a loop" src="https://docs.near.org/vi/assets/images/contract-wait-loop-c7b128ab1982ad80e9f40a7dfe4ddaea.png" width="1346" height="842" class="img_ev3q">
<em>Until now, contracts had to wait by calling themselves until a external service replies... more often than not the contract will run out of gas waiting</em></p>
<p>While this method works, it's far from ideal. It wastes a lot of gas on looping and - more often than not - runs out of gas, forcing the user to retry the transaction.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="yield-and-resume">Yield and Resume<a href="https://docs.near.org/vi/blog/yield-resume#yield-and-resume" class="hash-link" aria-label="Direct link to Yield and Resume" title="Direct link to Yield and Resume">​</a></h2>
<p>Starting from version <code>1.40</code> of the protocol, developers can <strong>delay the execution</strong> of a function until certain conditions are met (e.g. an external service provides a result).</p>
<p>This way, instead of the contract calling itself on a loop waiting, the contract can simply <strong>yield</strong> calling the function that gives the result. When an external response is provided, the contract will <strong>resume</strong> and return the result.</p>
<p><img decoding="async" loading="lazy" alt="waiting on a yield" src="https://docs.near.org/vi/assets/images/contract-wait-yield-6820c700955fe4e6942fb9fdc619aa77.png" width="1355" height="842" class="img_ev3q">
<em>Contracts can now yield the execution of a function until an external service signals that the result is ready</em></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-exactly-being-yielded">What is exactly being yielded?<a href="https://docs.near.org/vi/blog/yield-resume#what-is-exactly-being-yielded" class="hash-link" aria-label="Direct link to What is exactly being yielded?" title="Direct link to What is exactly being yielded?">​</a></h3>
<p>It is important to notice that the contract is not <strong>halting</strong> or <strong>blocking</strong> its ability to execute, nor <strong>halting in the middle of a function</strong> to later resume it.</p>
<p>In the same way that a function can return a promise to call another contract, now a function can return a <strong>yield</strong> to call another function.</p>
<p>Indeed, the contract is not halting, but simply <strong>delaying the execution of a callback</strong> until an external agent signals that it is ok to resume.</p>
<p>If the contract does not trigger a resume after 200 blocks - around 4 minutes - the yielded function will resume receiving a "timeout error" as input.</p>
<div class="theme-admonition theme-admonition-warning admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>State Changes</div><div class="admonitionContent_BuS1"><p>The state <strong>can change</strong> between the <code>yield</code> and the <code>resume</code>, since people can keep interacting with the contract.</p><p>Moreover, since the function used to signal is public, developers must make sure to guard it properly to avoid unwanted calls. This can be done by simply checking the caller of the function.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-does-it-change-for-the-user">How does it change for the user?<a href="https://docs.near.org/vi/blog/yield-resume#how-does-it-change-for-the-user" class="hash-link" aria-label="Direct link to How does it change for the user?" title="Direct link to How does it change for the user?">​</a></h3>
<p>Between the <code>yield</code> and <code>resume</code> the user will simply be waiting to receive the result. But, in contrast with waiting on a loop, the user will not pay GAS just for having the contract waiting!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-i-can-use-yieldresume-in-my-contract">How I can use yield/resume in my contract?<a href="https://docs.near.org/vi/blog/yield-resume#how-i-can-use-yieldresume-in-my-contract" class="hash-link" aria-label="Direct link to How I can use yield/resume in my contract?" title="Direct link to How I can use yield/resume in my contract?">​</a></h2>
<p>While we have not created any official <code>yield/resume</code> example, you can refer to <a href="https://github.com/near/near-sdk-rs/pull/1133/files" target="_blank" rel="noopener noreferrer">Saketh Are's example</a>, who has been working on the <code>yield/resume</code> implementation.</p>
<p>The basic idea is that the SDK now exposes two functions:</p>
<ul>
<li>A <code>yield(function_to_yield)</code> that returns a <code>yield_ID</code> which identifies the yield</li>
<li>A <code>resume(yield_ID)</code> that signals which instance of <code>function_to_yield</code> can now execute</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="simplified-example">Simplified Example<a href="https://docs.near.org/vi/blog/yield-resume#simplified-example" class="hash-link" aria-label="Direct link to Simplified Example" title="Direct link to Simplified Example">​</a></h4>
<div class="language-rust codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-rust codeBlock_bY9V thin-scrollbar" style="color:#bfc7d5;background-color:#292d3e"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// const DATA_ID_REGISTER: u64 = 0;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">pub</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(130, 170, 255)">request_weather</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;</span><span class="token keyword" style="font-style:italic">mut</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> city</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">String</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">let</span><span class="token plain"> index </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">next_available_request_index</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">next_available_request_index </span><span class="token operator" style="color:rgb(137, 221, 255)">+=</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">let</span><span class="token plain"> yield_promise </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token namespace" style="color:rgb(178, 204, 214)">env</span><span class="token namespace punctuation" style="color:rgb(199, 146, 234)">::</span><span class="token function" style="color:rgb(130, 170, 255)">promise_yield_create</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token string" style="color:rgb(195, 232, 141)">"callback_return_result"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;</span><span class="token namespace" style="color:rgb(178, 204, 214)">serde_json</span><span class="token namespace punctuation" style="color:rgb(199, 146, 234)">::</span><span class="token function" style="color:rgb(130, 170, 255)">to_vec</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">unwrap</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token constant" style="color:rgb(130, 170, 255)">SIGN_ON_FINISH_CALL_GAS</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token class-name" style="color:rgb(255, 203, 107)">GasWeight</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token constant" style="color:rgb(130, 170, 255)">DATA_ID_REGISTER</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Store the request, so an external service can easily fetch it</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// This is optional, as an indexer could simply observe it in the receipts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">let</span><span class="token plain"> data_id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">CryptoHash</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token namespace" style="color:rgb(178, 204, 214)">env</span><span class="token namespace punctuation" style="color:rgb(199, 146, 234)">::</span><span class="token function" style="color:rgb(130, 170, 255)">read_register</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token constant" style="color:rgb(130, 170, 255)">DATA_ID_REGISTER</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">expect</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">""</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">try_into</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">expect</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">""</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">requests</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">insert</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;</span><span class="token plain">index</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">WeatherRequest</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;</span><span class="token plain">data_id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;</span><span class="token plain">city</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// The return will be the result of "callback_return_result" (defined below)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token namespace" style="color:rgb(178, 204, 214)">env</span><span class="token namespace punctuation" style="color:rgb(199, 146, 234)">::</span><span class="token function" style="color:rgb(130, 170, 255)">promise_return</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">yield_promise</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/// Called by external participants to submit a response</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">pub</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(130, 170, 255)">respond</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;</span><span class="token keyword" style="font-style:italic">mut</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> data_id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">String</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> weather</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">String</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">let</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">mut</span><span class="token plain"> data_id_buf </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token number" style="color:rgb(247, 140, 108)">0u8</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">32</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token namespace" style="color:rgb(178, 204, 214)">hex</span><span class="token namespace punctuation" style="color:rgb(199, 146, 234)">::</span><span class="token function" style="color:rgb(130, 170, 255)">decode_to_slice</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">data_id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;</span><span class="token keyword" style="font-style:italic">mut</span><span class="token plain"> data_id_buf</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">expect</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">""</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">let</span><span class="token plain"> data_id </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> data_id_buf</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// check that caller is allowed to respond, weather is valid, etc.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token macro property">log!</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"submitting response {} for data id {:?}"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;</span><span class="token plain">weather</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;</span><span class="token plain">data_id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token namespace" style="color:rgb(178, 204, 214)">env</span><span class="token namespace punctuation" style="color:rgb(199, 146, 234)">::</span><span class="token function" style="color:rgb(130, 170, 255)">promise_yield_resume</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;</span><span class="token plain">data_id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;</span><span class="token namespace" style="color:rgb(178, 204, 214)">serde_json</span><span class="token namespace punctuation" style="color:rgb(199, 146, 234)">::</span><span class="token function" style="color:rgb(130, 170, 255)">to_vec</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;</span><span class="token plain">weather</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">unwrap</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/// Callback receiving the external data (or a PromiseError in case of timeout)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">pub</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:rgb(130, 170, 255)">callback_return_result</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;</span><span class="token keyword" style="font-style:italic">mut</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    request_index</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">u64</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token attribute attr-name" style="color:rgb(255, 203, 107)">#[callback_result]</span><span class="token plain"> weather</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Result</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token class-name" style="color:rgb(255, 203, 107)">String</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">PromiseError</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">-&gt;</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">String</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Clean up the local state</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">self</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain">requests</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">remove</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;</span><span class="token plain">request_index</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">match</span><span class="token plain"> weather </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token class-name" style="color:rgb(255, 203, 107)">Ok</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">weather</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"weather received: "</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">to_owned</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">+</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;</span><span class="token plain">weather</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token class-name" style="color:rgb(255, 203, 107)">Err</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">_</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"request timed out"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token function" style="color:rgb(130, 170, 255)">to_string</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Sao chép vào clipboard" title="Sao chép" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://docs.near.org/vi/blog/yield-resume#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>The ability to <code>yield</code> and <code>resume</code> computations is a big step forward for the NEAR protocol, as it enables developers to create contracts that rely on external services.</p>
<p>Currently, the feature is only <strong>available on testnet</strong>, and we are looking for feedback on how to improve it.</p>
<p>We expect to have a more user-friendly way to use <code>yield</code> and <code>resume</code> in the future, so stay tuned!</p>]]></content>
        <author>
            <name>Guille</name>
            <uri>https://github.com/gagdiez</uri>
        </author>
        <category label="protocol" term="protocol"/>
        <category label="updates" term="updates"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reorganizing our docs]]></title>
        <id>https://docs.near.org/vi/blog/reorganizing-docs</id>
        <link href="https://docs.near.org/vi/blog/reorganizing-docs"/>
        <updated>2024-04-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We released a mayor reorganization of our repository, so we can improve docs for everyone... including us]]></summary>
        <content type="html"><![CDATA[<p><em>We released a mayor reorganization of our repository, so we can improve docs for everyone... including us</em></p>
<p><img src="https://img.freepik.com/free-photo/ancient-books-adorn-library-carefully-arranged-with-classics-rare-gems_157027-2332.jpg"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="organic-growth">Organic growth<a href="https://docs.near.org/vi/blog/reorganizing-docs#organic-growth" class="hash-link" aria-label="Direct link to Organic growth" title="Direct link to Organic growth">​</a></h2>
<p>Our documentation is the result of multiple people collaborating across the span of four very active years, and it has seen a lot of changes: <a href="https://github.com/near/docs/commits/master/" target="_blank" rel="noopener noreferrer">2942 commits and counting</a>.</p>
<p>In the beginning, our docs only needed to explain how to create <a href="https://docs.near.org/vi/build/smart-contracts/what-is">smart contracts</a>, and how to <a href="https://docs.near.org/vi/build/web3-apps/quickstart">interact with them through a frontend</a>. Fast forward to today, and we have more than 200 pages of documentation, covering topics such as <a href="https://docs.near.org/vi/build/chain-abstraction/what-is">chain abstraction</a>, <a href="https://docs.near.org/vi/build/near-components/what-is">on-chain components</a>, <a href="https://docs.near.org/vi/build/data-infrastructure/what-is">data infrastructure</a>, and <a href="https://docs.near.org/vi/build/primitives/what-is">primitives such as NFT, FT</a>.</p>
<p>The best thing is that new features are released every single month. However, all progress comes at a cost, and as our ecosystem grew, so did the disorganization of our documentation.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-link-was-that-again">What link was that again?<a href="https://docs.near.org/vi/blog/reorganizing-docs#what-link-was-that-again" class="hash-link" aria-label="Direct link to What link was that again?" title="Direct link to What link was that again?">​</a></h2>
<p>Let's briefly explain how <a href="https://docusaurus.io/" target="_blank" rel="noopener noreferrer">docusaurus</a> (the framework we use in our docs) works so you can understand the problem.</p>
<p>In docusaurus, all the pages are written as simple markdown files. These files go inside the <code>./docs</code> folder, and can be organized in folders. Each file has a unique ID on its header that identifies it (e.g. <code>id: what-is</code>), and this ID, alongside its folder path, is used to generate the URL.</p>
<blockquote>
<p>For example, the document <a href="https://github.com/near/docs/blob/master/docs/2.build/2.smart-contracts/what-is.md" target="_blank" rel="noopener noreferrer"><code>docs/build/smart-contracts/what-is.md</code></a> has the <code>id: what-is</code>, so it ends being served in the URL <a href="https://docs.near.org/build/smart-contracts/what-is" target="_blank" rel="noopener noreferrer">https://docs.near.org/build/smart-contracts/what-is</a>.</p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-problem">The problem<a href="https://docs.near.org/vi/blog/reorganizing-docs#the-problem" class="hash-link" aria-label="Direct link to The problem" title="Direct link to The problem">​</a></h3>
<p>About a year ago, we noticed that our organic growth had left us with a very inconsistent URL structure. Basically, we had a lot of folders, and the files related to the same topic (e.g. NEAR components) would be all over the place.</p>
<p>For example, you would be in the "Build" section reading about "What is a NEAR Component?" and the URL was <code>/bos/tutorial/quickstart</code>. The next page was "Setup an Environment" located at <code>/bos/dev/intro</code>, followed by "Anatomy of a Component -&gt; State" at <code>/bos/api/state</code>. Talk about consistency!</p>
<p>Of course, we did not do this on purpose, it is just how things evolved. You might even notice that we are now talking about "NEAR Components" but the URL talks about "BOS". This is because when we started, "BOS" (Blockchain Operating System) felt like a good name, but community feedback made us know that, indeed, it was not.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-migration">The migration<a href="https://docs.near.org/vi/blog/reorganizing-docs#the-migration" class="hash-link" aria-label="Direct link to The migration" title="Direct link to The migration">​</a></h3>
<p>We <a href="https://github.com/near/docs/pull/1890/files" target="_blank" rel="noopener noreferrer">re-organized more than 200 files</a> to a new structure that is more consistent. This makes it easier for users to remember the URLs, improves our SEO, and makes it easier for contributors to find where to add new content. No more need to search across multiple folders trying to find the right file!</p>
<p>In the process, we updated all <strong>internal links</strong>, aided by our <a href="https://github.com/near/docs/blob/master/website/test-links.sh" target="_blank" rel="noopener noreferrer">link-checker script</a> to make sure we left <strong>no broken links</strong>. We also added <strong>URL redirects</strong> in our server, so all users coming from an external site are redirected to the correct URLs.</p>
<p>Besides checking broken links, we took the time to make sure all the <strong>translations were correctly migrated</strong>. The system Docusaurus uses (called <a href="https://crowdin.com/" target="_blank" rel="noopener noreferrer">Crowdin</a>) is not very good at detecting changes in a file, so migrating all the translations was a huge effort in itself.</p>
<p>We could write a blog post just about migrating translations in docusaurus + crowdin... but we will spare you the pain.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>Missing URL</div><div class="admonitionContent_BuS1"><p>If you come across a URL that is not working, please let us know by using the <code>Feedback</code> button on the right side of the page, or by opening an <a href="https://github.com/near/docs/issues" target="_blank" rel="noopener noreferrer">issue in our repository</a></p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What's next<a href="https://docs.near.org/vi/blog/reorganizing-docs#whats-next" class="hash-link" aria-label="Direct link to What's next" title="Direct link to What's next">​</a></h2>
<p>Now that most of our documentation is in a better shape, we can focus on improving the content itself. We have a lot of ideas on how to make the docs more interactive, and we are excited to start working on them.</p>
<p>Stay tuned for more updates, and remember that if you have any feedback or ideas, you can always reach out to us. We are always happy to hear from you!</p>
<p>See you in the next post! 🚀</p>]]></content>
        <author>
            <name>Guille</name>
            <uri>https://github.com/gagdiez</uri>
        </author>
        <category label="docusaurus" term="docusaurus"/>
        <category label="updates" term="updates"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[We have a blog now!]]></title>
        <id>https://docs.near.org/vi/blog/we-have-a-blog</id>
        <link href="https://docs.near.org/vi/blog/we-have-a-blog"/>
        <updated>2024-04-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Check check check. Is this thing on? Hello, world!]]></summary>
        <content type="html"><![CDATA[<p><em>Check check check. Is this thing on? Hello, world!</em></p>
<p><img src="https://docs.near.org/assets/images/protocol-b73c2a3ace3307226ee7eb2149ee432f.png"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="hello-there">Hello there!<a href="https://docs.near.org/vi/blog/we-have-a-blog#hello-there" class="hash-link" aria-label="Direct link to Hello there!" title="Direct link to Hello there!">​</a></h2>
<p>Welcome to the new NEAR documentation blog! We're excited to inaugurate this new space where we can share news and updates. We know what you are thinking — why a blog? Well, it allows us to interact with you in a different way!</p>
<p>When writing documentation, it is important for us to keep the content focused and concise. This way, when you read it, you have nothing to distract you, and you can focus on learning a new concept.</p>
<p>The problem with this is that many times, we want to share ideas, thoughts, or insights into why some things are the way they are. However, this would imply going off on a tangent and explaining why some decisions were made, which will probably add noise to the document. Most of the time, users just want a link to an example or working code. Also, people don't like to read long texts.</p>
<p>Besides that, sometimes we just want to share what we did during the week. For example, did you notice that we fixed the nightmare that was the URL structure, or that we added new landing pages for all concepts? We want to share these things with you, but they don't really belong in the Docs.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>You would not believe the number of times we said during a review <em>"let's remove that, we are writing technical documentation, not a blog post"</em> ... well, now we can make the blog post!</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-to-expect">What to expect<a href="https://docs.near.org/vi/blog/we-have-a-blog#what-to-expect" class="hash-link" aria-label="Direct link to What to expect" title="Direct link to What to expect">​</a></h2>
<p>We will be using this space to share updates about our docs, as well as <strong>complement them</strong> with additional information that we think you'll find interesting.</p>
<p>Our aim is to keep the blog updated at least once a week, but given the limited amount of time we have, we will see how that goes.</p>
<p>Moreover, we want to remind you that our Docs are an open source and <strong>collaborative project</strong>. If you feel like you have something to share, or want to contribute to the blog, feel free to reach out. And by reaching out, we mean <a href="https://github.com/near/docs/pulls" target="_blank" rel="noopener noreferrer">opening a PR</a>!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-new-era-for-near-docs">A new era for NEAR docs<a href="https://docs.near.org/vi/blog/we-have-a-blog#a-new-era-for-near-docs" class="hash-link" aria-label="Direct link to A new era for NEAR docs" title="Direct link to A new era for NEAR docs">​</a></h2>
<p>We are super excited to start this new section and hope it helps us to connect with all of you in a better way. We are looking forward to hearing your thoughts and feedback, and hope you enjoy the content we'll be sharing.</p>
<p>See you in the next post! 🚀</p>]]></content>
        <author>
            <name>Guille</name>
            <uri>https://github.com/gagdiez</uri>
        </author>
        <category label="updates" term="updates"/>
    </entry>
</feed>