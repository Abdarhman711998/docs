"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3945],{53909:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>r});var i=e(85893),a=e(11151);const s={id:"rpc",title:"RPC Client"},c="Diagram",o={id:"data-availability/rpc",title:"RPC Client",description:"This client is the defacto client for submitting blobs to NEAR.",source:"@site/i18n/vi/docusaurus-plugin-content-docs/current/data-availability/rpc.md",sourceDirName:"data-availability",slug:"/data-availability/rpc",permalink:"/vi/data-availability/rpc",draft:!1,unlisted:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/data-availability/rpc.md",tags:[],version:"current",lastUpdatedBy:"Github Actions",lastUpdatedAt:1704996595,formattedLastUpdatedAt:"11 thg 1, 2024",frontMatter:{id:"rpc",title:"RPC Client"},sidebar:"data-availability",previous:{title:"Light Client",permalink:"/vi/data-availability/light-client"},next:{title:"Integrations",permalink:"/vi/data-availability/integrations"}},l={},r=[{value:"Rust",id:"rust",level:2},{value:"Golang, or anything CFFI compatible",id:"golang-or-anything-cffi-compatible",level:2}];function d(t){const n={code:"code",h1:"h1",h2:"h2",hr:"hr",mermaid:"mermaid",p:"p",...(0,a.a)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:['This client is the defacto client for submitting blobs to NEAR.\nThese crates allow a client to interact with the blob store.\nIt can be treated as a "black box", where blobs go in, and ',(0,i.jsx)(n.code,{children:"[transaction_id ++ commitment]"})," emerges."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"da-rpc"})," crate is the rust client, which anyone can use if they prefer rust in their application.\nThe responsibility of this client is to provide a simple interface for interacting with NEAR DA."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"da-rpc-sys"})," crate is the FFI client binding for use by non-rust applications. This calls through to ",(0,i.jsx)(n.code,{children:"da-rpc"})," to interact with the blob store, with some additional black box functionality for dealing with pointers wrangling and such."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"da-rpc-go"})," crate is the go client bindings for use by non-rust applications, and this calls through to ",(0,i.jsx)(n.code,{children:"da-rpc-sys"}),", which provides another application-level layer for easy interaction with the bindings."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h1,{id:"diagram",children:"Diagram"}),"\n",(0,i.jsx)(n.p,{children:"The below diagrams outline how a rollup will interact with DA depending on their architecture."}),"\n",(0,i.jsx)(n.h2,{id:"rust",children:"Rust"}),"\n",(0,i.jsx)(n.mermaid,{value:"classDiagram \nclass DaRpcClient\nclass Blob {\n    +Namespace namespace\n    +bytes32 commitment\n    +bytes data\n}\nclass Namespace {\n    +u8 version\n    +u32 id\n}\nclass FrameRef {\n    +bytes32 tx_id\n    +bytes32 commitment\n}\n\nclass DaRpc {\n    <<interface>>\n    +submit(List~Blob~) FrameRef\n    +get(tx_id)\n}\n\nDaRpc <|-- DaRpcClient : implements\nDaRpc >-- Rollup : submit blobs\nDaRpc >-- Rollup : get blobs\n\nclass L1 {\n    postCommitment()\n    verifySequence()\n}\nL1 >-- Rollup : post frameRef with commitments"}),"\n",(0,i.jsx)(n.h2,{id:"golang-or-anything-cffi-compatible",children:"Golang, or anything CFFI compatible"}),"\n",(0,i.jsx)(n.p,{children:"This diagram outlines how rollups written in golang would interact with the go rpc client."}),"\n",(0,i.jsx)(n.mermaid,{value:"classDiagram \nclass Blob{\n    +Namespace namespace\n    +bytes32 commitment\n    +bytes data\n}\n\nclass Namespace {\n    +u8 version\n    +u32 id\n}\n\nclass FrameRef {\n    +bytes32 tx_id\n    +bytes32 commitment\n}\n\nclass DaRpcClient\n\nclass DaRpc{\n    <<interface>>\n    +submit(List~Blob~) FrameRef\n    +get(tx_id)\n}\n\nclass DaRpcSys{\n    +new_client(account, sk, contract, network, namespace)\n    +submit(*client, blobs) frame\n    +get(*client, tx_id)\n}\n\nclass DaRpcGo {\n    +newConfig(account, contract, key, namespaceId) Config\n    +submit(*Config, candidate, data) FrameRef\n    +force_submit(*Config, data) FrameRef\n    +get(*Config, FrameRef frameRef, txIndex)\n}\n\nDaRpc <|-- DaRpcClient : implements\nDaRpc >-- DaRpcSys : uses\nDaRpcSys >-- DaRpcGo : uses\n\nDaRpcGo >-- GoRollup : submit blobs\nDaRpcGo >-- GoRollup : get blobs\n\nclass L1 {\n    postCommitment()\n    verifySequence()\n}\nL1 >-- GoRollup : post frameRef with commitments"})]})}function p(t={}){const{wrapper:n}={...(0,a.a)(),...t.components};return n?(0,i.jsx)(n,{...t,children:(0,i.jsx)(d,{...t})}):d(t)}},11151:(t,n,e)=>{e.d(n,{Z:()=>o,a:()=>c});var i=e(67294);const a={},s=i.createContext(a);function c(t){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function o(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:c(t.components),i.createElement(s.Provider,{value:n},t.children)}}}]);