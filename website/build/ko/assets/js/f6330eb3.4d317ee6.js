"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1952],{71849:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var c=i(85893),t=i(11151);const s={id:"implicit-accounts",title:"Implicit Accounts",sidebar_label:"Implicit Accounts"},a=void 0,r={id:"integrator/implicit-accounts",title:"Implicit Accounts",description:"Background",source:"@site/../docs/6.integrator/implicit-accounts.md",sourceDirName:"6.integrator",slug:"/integrator/implicit-accounts",permalink:"/ko/integrator/implicit-accounts",draft:!1,unlisted:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/6.integrator/implicit-accounts.md",tags:[],version:"current",lastUpdatedBy:"gagdiez",lastUpdatedAt:1702155614,formattedLastUpdatedAt:"2023\ub144 12\uc6d4 9\uc77c",frontMatter:{id:"implicit-accounts",title:"Implicit Accounts",sidebar_label:"Implicit Accounts"},sidebar:"exchanges",previous:{title:"Fungible Tokens",permalink:"/ko/integrator/fungible-tokens"},next:{title:"Introduction",permalink:"/ko/integrator/errors/introduction"}},o={},l=[{value:"Background",id:"background",level:2},{value:"Specifications",id:"specifications",level:2},{value:"Creating an account locally",id:"creating-an-account-locally",level:2},{value:"Set <code>betanet</code> network",id:"set-betanet-network",level:3},{value:"Generating a key-pair first",id:"generating-a-key-pair-first",level:3},{value:"Viewing the key-pair",id:"viewing-the-key-pair",level:3},{value:"Converting a public key to an account ID.",id:"converting-a-public-key-to-an-account-id",level:3},{value:"Moving the temporary key-pair",id:"moving-the-temporary-key-pair",level:3},{value:"Transferring to the implicit account",id:"transferring-to-the-implicit-account",level:2},{value:"BONUS: Converting public key using python (for learning purposes)",id:"bonus-converting-public-key-using-python-for-learning-purposes",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.h2,{id:"background",children:"Background"}),"\n",(0,c.jsx)(n.p,{children:"Implicit accounts work similarly to Bitcoin/Ethereum accounts."}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"They allow you to reserve an account ID before it's created by generating a ED25519 key-pair locally."}),"\n",(0,c.jsx)(n.li,{children:"This key-pair has a public key that maps to the account ID."}),"\n",(0,c.jsx)(n.li,{children:"The account ID is a lowercase hex representation of the public key."}),"\n",(0,c.jsx)(n.li,{children:"An ED25519 Public key contains 32 bytes that maps to 64 characters account ID."}),"\n",(0,c.jsx)(n.li,{children:"The corresponding secret key allows you to sign transactions on behalf of this account once it's created on chain."}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"specifications",children:(0,c.jsx)(n.a,{href:"https://nomicon.io/DataStructures/Account.html#implicit-account-ids",children:"Specifications"})}),"\n",(0,c.jsx)(n.h2,{id:"creating-an-account-locally",children:"Creating an account locally"}),"\n",(0,c.jsxs)(n.p,{children:["For the purpose of this demo, we'll use the ",(0,c.jsx)(n.code,{children:"betanet"})," network."]}),"\n",(0,c.jsxs)(n.h3,{id:"set-betanet-network",children:["Set ",(0,c.jsx)(n.code,{children:"betanet"})," network"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"export NEAR_ENV=betanet\n"})}),"\n",(0,c.jsx)(n.h3,{id:"generating-a-key-pair-first",children:"Generating a key-pair first"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"near generate-key tmp1\n"})}),"\n",(0,c.jsx)(n.p,{children:"Example Output"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"Generated key pair with ed25519:BGCCDDHfysuuVnaNVtEhhqeT4k9Muyem3Kpgq2U1m9HX public key\n"})}),"\n",(0,c.jsxs)(n.p,{children:["It generates a key-pair for ",(0,c.jsx)(n.code,{children:"tmp1"})," account ID. The new public key is ",(0,c.jsx)(n.code,{children:"ed25519:BGCCDDHfysuuVnaNVtEhhqeT4k9Muyem3Kpgq2U1m9HX"}),"."]}),"\n",(0,c.jsxs)(n.p,{children:["NEAR's string representation of a public key is ",(0,c.jsx)(n.code,{children:"<curve>:<data>"}),"."]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:["Curve is either ",(0,c.jsx)(n.code,{children:"ed25519"})," or ",(0,c.jsx)(n.code,{children:"secp256k1"}),". For implicit accounts we only support ",(0,c.jsx)(n.code,{children:"ed25519"}),"."]}),"\n",(0,c.jsxs)(n.li,{children:["Data is a base58 encoding of the public key. For ",(0,c.jsx)(n.code,{children:"ed25519"})," it contains 32 bytes."]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"This command generated a key-pair locally and stored it locally at:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"~/.near-credentials/betanet/tmp1.json\n"})}),"\n",(0,c.jsx)(n.h3,{id:"viewing-the-key-pair",children:"Viewing the key-pair"}),"\n",(0,c.jsx)(n.p,{children:"Run this command to print the content of the key-pair file:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"cat ~/.near-credentials/betanet/tmp1.json\n"})}),"\n",(0,c.jsx)(n.p,{children:"Content:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-json",children:'{"account_id":"tmp1","public_key":"ed25519:BGCCDDHfysuuVnaNVtEhhqeT4k9Muyem3Kpgq2U1m9HX","private_key":"ed25519:4qAABW9HfVW4UNQjuQAaAWpB21jqoP58kGqDia18FZDRat6Lg6TLWdAD9FyvAd3PPQLYF4hhx2mZAotJudVjoqfs"}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["As you can see, it's a valid json-file and public key matches the one we generated.\nThe ",(0,c.jsx)(n.code,{children:"private_key"})," is a secret/private key of the key pair that can be used to sign transactions with the corresponding public key."]}),"\n",(0,c.jsx)(n.h3,{id:"converting-a-public-key-to-an-account-id",children:"Converting a public key to an account ID."}),"\n",(0,c.jsxs)(n.p,{children:["Let's convert a public key from NEAR string representation ",(0,c.jsx)(n.code,{children:"ed25519:BGCCDDHfysuuVnaNVtEhhqeT4k9Muyem3Kpgq2U1m9HX"})]}),"\n",(0,c.jsxs)(n.p,{children:["The easiest way is to use ",(0,c.jsx)(n.code,{children:"near-cli"})," with interactive console ",(0,c.jsx)(n.code,{children:"repl"})]}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:["Start ",(0,c.jsx)(n.code,{children:"near repl"}),":"]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"near repl\n"})}),"\n",(0,c.jsxs)(n.ol,{start:"2",children:["\n",(0,c.jsx)(n.li,{children:"Store your base58 public key to a local constant:"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"const pk58 = 'ed25519:BGCCDDHfysuuVnaNVtEhhqeT4k9Muyem3Kpgq2U1m9HX'\n"})}),"\n",(0,c.jsxs)(n.ol,{start:"3",children:["\n",(0,c.jsx)(n.li,{children:"Now let's parse the public key and convert it to the hex in one line:"}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"nearAPI.utils.PublicKey.fromString(pk58).data.toString('hex')\n"})}),"\n",(0,c.jsxs)(n.p,{children:["The output string is the account ID in hex (without ",(0,c.jsx)(n.code,{children:"'"}),"):"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-javascript",children:"'98793cd91a3f870fb126f66285808c7e094afcfc4eda8a970f6648cdf0dbd6de'\n"})}),"\n",(0,c.jsxs)(n.p,{children:["Now the new account ID is ",(0,c.jsx)(n.code,{children:"98793cd91a3f870fb126f66285808c7e094afcfc4eda8a970f6648cdf0dbd6de"}),"."]}),"\n",(0,c.jsxs)(n.ol,{start:"4",children:["\n",(0,c.jsx)(n.li,{children:"We can now give this account ID to someone and ask them to transfer tokens."}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"moving-the-temporary-key-pair",children:"Moving the temporary key-pair"}),"\n",(0,c.jsxs)(n.p,{children:["Finally, we need to move ",(0,c.jsx)(n.code,{children:"tmp1.json"})," key-pair to the real account ID, so that ",(0,c.jsx)(n.code,{children:"near-cli"})," can use it to sign transactions."]}),"\n",(0,c.jsx)(n.p,{children:"Let's first export our account ID to a bash env variable:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:'export ACCOUNT="98793cd91a3f870fb126f66285808c7e094afcfc4eda8a970f6648cdf0dbd6de"\n'})}),"\n",(0,c.jsxs)(n.p,{children:["Now we can move the ",(0,c.jsx)(n.code,{children:"tmp1.json"})," file:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"mv ~/.near-credentials/betanet/tmp1.json ~/.near-credentials/betanet/$ACCOUNT.json\n"})}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsxs)(n.em,{children:["NOTE: While ",(0,c.jsx)(n.code,{children:".json"})," key-pair file still contains the ",(0,c.jsx)(n.code,{children:'"account_id":"tmp1"'}),", it's okay. Because ",(0,c.jsx)(n.code,{children:"near-cli"})," doesn't care."]})}),"\n",(0,c.jsx)(n.p,{children:"Assuming you've received tokens on your new account, you can transfer from it using the following command:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"near $ACCOUNT <receiver> <amount>\n"})}),"\n",(0,c.jsxs)(n.p,{children:["You can also replace ",(0,c.jsx)(n.code,{children:"$ACCOUNT"})," with your actual account ID, e.g."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"near send 98793cd91a3f870fb126f66285808c7e094afcfc4eda8a970f6648cdf0dbd6de <receiver> <amount>\n"})}),"\n",(0,c.jsx)(n.h2,{id:"transferring-to-the-implicit-account",children:"Transferring to the implicit account"}),"\n",(0,c.jsxs)(n.p,{children:["Let's say someone gives you their account ID ",(0,c.jsx)(n.code,{children:"0861ea8ddd696525696ccf3148dd706c4fda981c64d8a597490472594400c223"}),". You can just transfer to it by running:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"near send <your_account_id> 0861ea8ddd696525696ccf3148dd706c4fda981c64d8a597490472594400c223 <amount>\n"})}),"\n",(0,c.jsx)(n.h2,{id:"bonus-converting-public-key-using-python-for-learning-purposes",children:"BONUS: Converting public key using python (for learning purposes)"}),"\n",(0,c.jsxs)(n.p,{children:["For this flow we'll use ",(0,c.jsx)(n.code,{children:"python3"})," (with version ",(0,c.jsx)(n.code,{children:"3.5+"}),") with ",(0,c.jsx)(n.code,{children:"base58"})," library."]}),"\n",(0,c.jsxs)(n.p,{children:["You can install this library with ",(0,c.jsx)(n.code,{children:"pip3"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"pip3 install --user base58\n"})}),"\n",(0,c.jsx)(n.p,{children:"Start python3 interpreter:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-bash",children:"python3\n"})}),"\n",(0,c.jsxs)(n.p,{children:["The first thing is to get the data part from the public key (without ",(0,c.jsx)(n.code,{children:"ed25519:"})," prefix). Let's store it in a variable ",(0,c.jsx)(n.code,{children:"pk58"}),":"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:"pk58 = 'BGCCDDHfysuuVnaNVtEhhqeT4k9Muyem3Kpgq2U1m9HX'\n"})}),"\n",(0,c.jsx)(n.p,{children:"Now let's import base58:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:"import base58\n"})}),"\n",(0,c.jsx)(n.p,{children:"Finally, let's convert our base58 public key representation to bytes and then to hex:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:"base58.b58decode(pk58).hex()\n"})}),"\n",(0,c.jsx)(n.p,{children:"Output:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"'98793cd91a3f870fb126f66285808c7e094afcfc4eda8a970f6648cdf0dbd6de'\n"})}),"\n",(0,c.jsxs)(n.p,{children:["This gives us the same account ID as ",(0,c.jsx)(n.code,{children:"near-cli"}),", so this is encouraging."]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"Note:"})," The default network for ",(0,c.jsx)(n.code,{children:"near-cli"})," is ",(0,c.jsx)(n.code,{children:"testnet"}),". If you would like to change this to ",(0,c.jsx)(n.code,{children:"mainnet"})," or ",(0,c.jsx)(n.code,{children:"betanet"}),", please see ",(0,c.jsxs)(n.a,{href:"/tools/near-cli#network-selection",children:[(0,c.jsx)(n.code,{children:"near-cli"})," network selection"]})," for instructions."]}),"\n",(0,c.jsx)(n.admonition,{title:"Got a question?",type:"tip",children:(0,c.jsx)("a",{href:"https://stackoverflow.com/questions/tagged/nearprotocol",children:" Ask it on StackOverflow! "})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>a});var c=i(67294);const t={},s=c.createContext(t);function a(e){const n=c.useContext(s);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),c.createElement(s.Provider,{value:n},e.children)}}}]);