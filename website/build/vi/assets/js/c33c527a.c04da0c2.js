"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7212],{45783:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>c,metadata:()=>l,toc:()=>d});var r=t(85893),a=t(11151),o=t(74866),s=t(85162);const c={id:"smart-contract",title:"Smart Contract",hide_table_of_contents:!1},i=void 0,l={id:"primitives/dex/interacting/smart-contract",title:"Smart Contract",description:"This section will explain how a smart contract can deposit funds to DEX and swap tokens there.",source:"@site/i18n/vi/docusaurus-plugin-content-docs/current/7.primitives/dex/interacting/smart-contract.md",sourceDirName:"7.primitives/dex/interacting",slug:"/primitives/dex/interacting/smart-contract",permalink:"/vi/primitives/dex/interacting/smart-contract",draft:!1,unlisted:!1,editUrl:"https://github.com/near/docs/edit/master/website/../docs/7.primitives/dex/interacting/smart-contract.md",tags:[],version:"current",frontMatter:{id:"smart-contract",title:"Smart Contract",hide_table_of_contents:!1},sidebar:"primitives",previous:{title:"Web Application",permalink:"/vi/primitives/dex/interacting/web-app"},next:{title:"NEAR CLI",permalink:"/vi/primitives/dex/interacting/near-cli"}},u={},d=[{value:"Base Contract",id:"base-contract",level:3},{value:"Swap tokens",id:"swap-tokens",level:2},{value:"Get pools",id:"get-pools",level:3},{value:"Check deposit balances",id:"check-deposit-balances",level:3},{value:"Deposit funds",id:"deposit-funds",level:3}];function p(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This section will explain how a smart contract can deposit funds to DEX and swap tokens there."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"base-contract",children:"Base Contract"}),"\n",(0,r.jsx)(n.p,{children:"The examples assume that the contract is defined as follows:"}),"\n",(0,r.jsx)(o.Z,{children:(0,r.jsx)(s.Z,{value:"Ref Finance",label:"Ref Finance",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'use std::collections::HashMap;\n\nuse near_sdk::ext_contract;\nuse near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};\nuse near_sdk::json_types::U128;\nuse near_sdk::serde::{Deserialize, Serialize};\nuse near_sdk::{env, near_bindgen, log, Gas, AccountId, Promise, PromiseError};\n\nconst AMM_CONTRACT: &str = "v2.ref-finance.near";\n\nconst YOCTO_NEAR: u128 = 1;\nconst TGAS: u64 = 1_000_000_000_000;\n\n// Define the contract structure\n#[near_bindgen]\n#[derive(BorshDeserialize, BorshSerialize)]\npub struct Contract {\n  amm_contract: AccountId,\n}\n\nimpl Default for Contract {\n    // The default trait with which to initialize the contract\n    fn default() -> Self {\n        Self {\n          amm_contract: AMM_CONTRACT.parse().unwrap(),\n        }\n    }\n}\n\n// Implement the contract structure\n#[near_bindgen]\nimpl Contract {}\n'})})})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"swap-tokens",children:"Swap tokens"}),"\n",(0,r.jsx)(o.Z,{children:(0,r.jsxs)(s.Z,{value:"Ref Finance",label:"Ref Finance",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[derive(Serialize, Deserialize)]\n#[serde(crate = "near_sdk::serde")]\npub struct SwapAction {\n    /// Pool which should be used for swapping.\n    pub pool_id: u64,\n    /// Token to swap from.\n    pub token_in: AccountId,\n    /// Amount to exchange.\n    /// If amount_in is None, it will take amount_out from previous step.\n    /// Will fail if amount_in is None on the first step.\n    pub amount_in: Option<U128>,\n    /// Token to swap into.\n    pub token_out: AccountId,\n    /// Required minimum amount of token_out.\n    pub min_amount_out: U128,\n}\n\n// Validator interface, for cross-contract calls\n#[ext_contract(ext_amm_contract)]\ntrait ExternalAmmContract {\n  fn swap(&self, actions: Vec<SwapAction>) -> Promise;\n}\n\n// Implement the contract structure\n#[near_bindgen]\nimpl Contract {\n  #[private] // Public - but only callable by env::current_account_id()\n  pub fn external_call_callback(&self, #[callback_result] call_result: Result<String, PromiseError>) {\n    // Check if the promise succeeded\n    if call_result.is_err() {\n      log!("There was an error contacting external contract");\n    }\n  }\n\n  #[payable]\n  pub fn swap_tokens(&mut self, pool_id: u64, token_in: AccountId, token_out: AccountId, amount_in: U128, min_amount_out: U128) -> Promise {\n    assert_eq!(env::attached_deposit(), 1, "Requires attached deposit of exactly 1 yoctoNEAR");\n\n    let swap_action = SwapAction {\n      pool_id,\n      token_in,\n      token_out,\n      amount_in: Some(amount_in),\n      min_amount_out\n    };\n\n    let mut actions = Vec::new();\n    actions.push(swap_action);\n\n    let promise = ext_amm_contract::ext(self.amm_contract.clone())\n      .with_static_gas(Gas(150*TGAS))\n      .with_attached_deposit(YOCTO_NEAR)\n      .swap(actions);\n\n    return promise.then( // Create a promise to callback query_greeting_callback\n      Self::ext(env::current_account_id())\n      .with_static_gas(Gas(100*TGAS))\n      .external_call_callback()\n    )\n  }\n}\n'})}),(0,r.jsx)("hr",{class:"subsection"}),(0,r.jsx)(n.h3,{id:"get-pools",children:"Get pools"}),(0,r.jsxs)(n.p,{children:["In order to make swap you need to know ",(0,r.jsx)(n.code,{children:"pool_id"}),". The pool index is its id."]}),(0,r.jsx)(n.p,{children:"Query available pools in your contract:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[derive(Serialize, Deserialize)]\n#[serde(crate = "near_sdk::serde")]\npub struct PoolInfo {\n  /// Pool kind.\n  pub pool_kind: String,\n  /// List of tokens in the pool.\n  pub token_account_ids: Vec<AccountId>,\n  /// How much NEAR this contract has.\n  pub amounts: Vec<U128>,\n  /// Fee charged for swap.\n  pub total_fee: u32,\n  /// Total number of shares.\n  pub shares_total_supply: U128,\n  pub amp: u64,\n}\n\n// Validator interface, for cross-contract calls\n#[ext_contract(ext_amm_contract)]\ntrait ExternalAmmContract {\n  fn get_pools(&self, from_index: u64, limit: u64) -> Promise;\n}\n\n// Implement the contract structure\n#[near_bindgen]\nimpl Contract {\n  #[private] // Public - but only callable by env::current_account_id()\n  pub fn external_get_pools_callback(&self, #[callback_result] call_result: Result<Vec<PoolInfo>, PromiseError>) -> Option<Vec<PoolInfo>> {\n    // Check if the promise succeeded\n    if call_result.is_err() {\n      log!("There was an error contacting external contract");\n      return None;\n    }\n\n    // Return the pools data\n    let pools_data = call_result.unwrap();\n    return Some(pools_data);\n  }\n\n  pub fn get_amm_pools(&self, from_index: u64, limit: u64) -> Promise {\n    let promise = ext_amm_contract::ext(self.amm_contract.clone())\n      .get_pools(from_index, limit);\n\n    return promise.then( // Create a promise to callback query_greeting_callback\n      Self::ext(env::current_account_id())\n      .external_get_pools_callback()\n    )\n  }\n}\n'})}),(0,r.jsx)("hr",{class:"subsection"}),(0,r.jsx)(n.h3,{id:"check-deposit-balances",children:"Check deposit balances"}),(0,r.jsx)(n.p,{children:"In order to swap tokens your contract must have enough token balance."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'// Validator interface, for cross-contract calls\n#[ext_contract(ext_amm_contract)]\ntrait ExternalAmmContract {\n  fn get_deposits(&self, account_id: AccountId) -> Promise;\n}\n\n// Implement the contract structure\n#[near_bindgen]\nimpl Contract {\n  #[private] // Public - but only callable by env::current_account_id()\n  pub fn external_get_deposits_callback(&self, #[callback_result] call_result: Result<HashMap<AccountId, U128>, PromiseError>) -> Option<HashMap<AccountId, U128>> {\n    // Check if the promise succeeded\n    if call_result.is_err() {\n      log!("There was an error contacting external contract");\n      return None;\n    }\n\n    // Return the pools data\n    let deposits_data = call_result.unwrap();\n    return Some(deposits_data);\n  }\n\n  pub fn get_contract_deposits(&self) -> Promise {\n    let promise = ext_amm_contract::ext(self.amm_contract.clone())\n      .get_deposits(env::current_account_id());\n\n    return promise.then( // Create a promise to callback query_greeting_callback\n      Self::ext(env::current_account_id())\n      .external_get_deposits_callback()\n    )\n  }\n}\n'})}),(0,r.jsx)("hr",{class:"subsection"}),(0,r.jsx)(n.h3,{id:"deposit-funds",children:"Deposit funds"}),(0,r.jsxs)(n.p,{children:["See how to transfer funds from smart contract ",(0,r.jsx)(n.a,{href:"/vi/primitives/ft/interacting/smart-contract#attaching-fts-to-a-call",children:"here"}),"."]})]})})]})}function m(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},85162:(e,n,t)=>{t.d(n,{Z:()=>s});t(67294);var r=t(36905);const a={tabItem:"tabItem_Ymn6"};var o=t(85893);function s(e){var n=e.children,t=e.hidden,s=e.className;return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.Z)(a.tabItem,s),hidden:t,children:n})}},74866:(e,n,t)=>{t.d(n,{Z:()=>w});var r=t(67294),a=t(36905),o=t(12466),s=t(16550),c=t(20469),i=t(91980),l=t(67392),u=t(50012);function d(e){var n,t;return null!=(n=null==(t=r.Children.toArray(e).filter((function(e){return"\n"!==e})).map((function(e){if(!e||(0,r.isValidElement)(e)&&((n=e.props)&&"object"==typeof n&&"value"in n))return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:t.filter(Boolean))?n:[]}function p(e){var n=e.values,t=e.children;return(0,r.useMemo)((function(){var e=null!=n?n:function(e){return d(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}(t);return function(e){var n=(0,l.l)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function m(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function f(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId,o=(0,s.k6)(),c=function(e){var n=e.queryString,t=void 0!==n&&n,r=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=r?r:null}({queryString:t,groupId:a});return[(0,i._X)(c),(0,r.useCallback)((function(e){if(c){var n=new URLSearchParams(o.location.search);n.set(c,e),o.replace(Object.assign({},o.location,{search:n.toString()}))}}),[c,o])]}function h(e){var n,t,a,o,s=e.defaultValue,i=e.queryString,l=void 0!==i&&i,d=e.groupId,h=p(e),_=(0,r.useState)((function(){return function(e){var n,t=e.defaultValue,r=e.tabValues;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:r}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+r.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var a=null!=(n=r.find((function(e){return e.default})))?n:r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:s,tabValues:h})})),b=_[0],v=_[1],x=f({queryString:l,groupId:d}),g=x[0],k=x[1],w=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:d}.groupId),t=(0,u.Nk)(n),a=t[0],o=t[1],[a,(0,r.useCallback)((function(e){n&&o.set(e)}),[n,o])]),j=w[0],y=w[1],C=function(){var e=null!=g?g:j;return m({value:e,tabValues:h})?e:null}();return(0,c.Z)((function(){C&&v(C)}),[C]),{selectedValue:b,selectValue:(0,r.useCallback)((function(e){if(!m({value:e,tabValues:h}))throw new Error("Can't select invalid tab value="+e);v(e),k(e),y(e)}),[k,y,h]),tabValues:h}}var _=t(72389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=t(85893);function x(e){var n=e.className,t=e.block,r=e.selectedValue,s=e.selectValue,c=e.tabValues,i=[],l=(0,o.o5)().blockElementScrollPositionUntilNextRender,u=function(e){var n=e.currentTarget,t=i.indexOf(n),a=c[t].value;a!==r&&(l(n),s(a))},d=function(e){var n,t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":var r,a=i.indexOf(e.currentTarget)+1;t=null!=(r=i[a])?r:i[0];break;case"ArrowLeft":var o,s=i.indexOf(e.currentTarget)-1;t=null!=(o=i[s])?o:i[i.length-1]}null==(n=t)||n.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},n),children:c.map((function(e){var n=e.value,t=e.label,o=e.attributes;return(0,v.jsx)("li",Object.assign({role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:function(e){return i.push(e)},onKeyDown:d,onClick:u},o,{className:(0,a.Z)("tabs__item",b.tabItem,null==o?void 0:o.className,{"tabs__item--active":r===n}),children:null!=t?t:n}),n)}))})}function g(e){var n=e.lazy,t=e.children,a=e.selectedValue,o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){var s=o.find((function(e){return e.props.value===a}));return s?(0,r.cloneElement)(s,{className:"margin-top--md"}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:o.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})}))})}function k(e){var n=h(e);return(0,v.jsxs)("div",{className:(0,a.Z)("tabs-container",b.tabList),children:[(0,v.jsx)(x,Object.assign({},e,n)),(0,v.jsx)(g,Object.assign({},e,n))]})}function w(e){var n=(0,_.Z)();return(0,v.jsx)(k,Object.assign({},e,{children:d(e.children)}),String(n))}},11151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>s});var r=t(67294);const a={},o=r.createContext(a);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);